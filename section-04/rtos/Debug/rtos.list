
rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e0  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080035a0  080035a0  000045a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003650  08003650  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003650  08003650  00005060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003650  08003650  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003650  08003650  00004650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003654  08003654  00004654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003658  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001220  20000060  080036b8  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001280  080036b8  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117e8  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027c0  00000000  00000000  00016870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00019030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3f  00000000  00000000  00019fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b51  00000000  00000000  0001ac1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121f2  00000000  00000000  0002c770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ca07  00000000  00000000  0003e962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab369  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab8  00000000  00000000  000ab3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000aee64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003588 	.word	0x08003588

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08003588 	.word	0x08003588

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	@ (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	@ (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	@ 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)
 8000248:	2000007c 	.word	0x2000007c
 800024c:	2000011c 	.word	0x2000011c

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b096      	sub	sp, #88	@ 0x58
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 faad 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f847 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f8bf 	bl	80003e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000262:	f000 f88d 	bl	8000380 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000266:	253c      	movs	r5, #60	@ 0x3c
 8000268:	197b      	adds	r3, r7, r5
 800026a:	4a1a      	ldr	r2, [pc, #104]	@ (80002d4 <main+0x84>)
 800026c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800026e:	c313      	stmia	r3!, {r0, r1, r4}
 8000270:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000272:	c313      	stmia	r3!, {r0, r1, r4}
 8000274:	6812      	ldr	r2, [r2, #0]
 8000276:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000278:	197b      	adds	r3, r7, r5
 800027a:	2100      	movs	r1, #0
 800027c:	0018      	movs	r0, r3
 800027e:	f001 ffd2 	bl	8002226 <osThreadCreate>
 8000282:	0002      	movs	r2, r0
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <main+0x88>)
 8000286:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskA */
  osThreadDef(TaskA, StartTask02, osPriorityHigh, 0, 128);
 8000288:	2520      	movs	r5, #32
 800028a:	197b      	adds	r3, r7, r5
 800028c:	4a13      	ldr	r2, [pc, #76]	@ (80002dc <main+0x8c>)
 800028e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000290:	c313      	stmia	r3!, {r0, r1, r4}
 8000292:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000294:	c313      	stmia	r3!, {r0, r1, r4}
 8000296:	6812      	ldr	r2, [r2, #0]
 8000298:	601a      	str	r2, [r3, #0]
  TaskAHandle = osThreadCreate(osThread(TaskA), NULL);
 800029a:	197b      	adds	r3, r7, r5
 800029c:	2100      	movs	r1, #0
 800029e:	0018      	movs	r0, r3
 80002a0:	f001 ffc1 	bl	8002226 <osThreadCreate>
 80002a4:	0002      	movs	r2, r0
 80002a6:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <main+0x90>)
 80002a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskB */
  osThreadDef(TaskB, StartTask03, osPriorityLow, 0, 128);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4a0d      	ldr	r2, [pc, #52]	@ (80002e4 <main+0x94>)
 80002ae:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002b0:	c313      	stmia	r3!, {r0, r1, r4}
 80002b2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002b4:	c313      	stmia	r3!, {r0, r1, r4}
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	601a      	str	r2, [r3, #0]
  TaskBHandle = osThreadCreate(osThread(TaskB), NULL);
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2100      	movs	r1, #0
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 ffb1 	bl	8002226 <osThreadCreate>
 80002c4:	0002      	movs	r2, r0
 80002c6:	4b08      	ldr	r3, [pc, #32]	@ (80002e8 <main+0x98>)
 80002c8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002ca:	f001 ffa4 	bl	8002216 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	e7fd      	b.n	80002ce <main+0x7e>
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	080035ac 	.word	0x080035ac
 80002d8:	200003a4 	.word	0x200003a4
 80002dc:	080035d0 	.word	0x080035d0
 80002e0:	200003a8 	.word	0x200003a8
 80002e4:	080035f4 	.word	0x080035f4
 80002e8:	200003ac 	.word	0x200003ac

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b590      	push	{r4, r7, lr}
 80002ee:	b091      	sub	sp, #68	@ 0x44
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	2410      	movs	r4, #16
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	0018      	movs	r0, r3
 80002f8:	2330      	movs	r3, #48	@ 0x30
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f003 f851 	bl	80033a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000302:	003b      	movs	r3, r7
 8000304:	0018      	movs	r0, r3
 8000306:	2310      	movs	r3, #16
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f003 f84a 	bl	80033a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000310:	0021      	movs	r1, r4
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2202      	movs	r2, #2
 8000316:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2201      	movs	r2, #1
 800031c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2210      	movs	r2, #16
 8000322:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2202      	movs	r2, #2
 8000328:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2200      	movs	r2, #0
 800032e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	22a0      	movs	r2, #160	@ 0xa0
 8000334:	0392      	lsls	r2, r2, #14
 8000336:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	187b      	adds	r3, r7, r1
 8000340:	0018      	movs	r0, r3
 8000342:	f000 fcbd 	bl	8000cc0 <HAL_RCC_OscConfig>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800034a:	f000 f8ed 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	003b      	movs	r3, r7
 8000350:	2207      	movs	r2, #7
 8000352:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	003b      	movs	r3, r7
 8000356:	2202      	movs	r2, #2
 8000358:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	003b      	movs	r3, r7
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	003b      	movs	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000366:	003b      	movs	r3, r7
 8000368:	2101      	movs	r1, #1
 800036a:	0018      	movs	r0, r3
 800036c:	f000 ffc2 	bl	80012f4 <HAL_RCC_ClockConfig>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000374:	f000 f8d8 	bl	8000528 <Error_Handler>
  }
}
 8000378:	46c0      	nop			@ (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b011      	add	sp, #68	@ 0x44
 800037e:	bd90      	pop	{r4, r7, pc}

08000380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000384:	4b14      	ldr	r3, [pc, #80]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 8000386:	4a15      	ldr	r2, [pc, #84]	@ (80003dc <MX_USART2_UART_Init+0x5c>)
 8000388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800038a:	4b13      	ldr	r3, [pc, #76]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 800038c:	2296      	movs	r2, #150	@ 0x96
 800038e:	0212      	lsls	r2, r2, #8
 8000390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003b6:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003c2:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 fb49 	bl	8001a5c <HAL_UART_Init>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ce:	f000 f8ab 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000031c 	.word	0x2000031c
 80003dc:	40004400 	.word	0x40004400

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	b089      	sub	sp, #36	@ 0x24
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	240c      	movs	r4, #12
 80003e8:	193b      	adds	r3, r7, r4
 80003ea:	0018      	movs	r0, r3
 80003ec:	2314      	movs	r3, #20
 80003ee:	001a      	movs	r2, r3
 80003f0:	2100      	movs	r1, #0
 80003f2:	f002 ffd7 	bl	80033a4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f6:	4b2d      	ldr	r3, [pc, #180]	@ (80004ac <MX_GPIO_Init+0xcc>)
 80003f8:	695a      	ldr	r2, [r3, #20]
 80003fa:	4b2c      	ldr	r3, [pc, #176]	@ (80004ac <MX_GPIO_Init+0xcc>)
 80003fc:	2180      	movs	r1, #128	@ 0x80
 80003fe:	0309      	lsls	r1, r1, #12
 8000400:	430a      	orrs	r2, r1
 8000402:	615a      	str	r2, [r3, #20]
 8000404:	4b29      	ldr	r3, [pc, #164]	@ (80004ac <MX_GPIO_Init+0xcc>)
 8000406:	695a      	ldr	r2, [r3, #20]
 8000408:	2380      	movs	r3, #128	@ 0x80
 800040a:	031b      	lsls	r3, r3, #12
 800040c:	4013      	ands	r3, r2
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000412:	4b26      	ldr	r3, [pc, #152]	@ (80004ac <MX_GPIO_Init+0xcc>)
 8000414:	695a      	ldr	r2, [r3, #20]
 8000416:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <MX_GPIO_Init+0xcc>)
 8000418:	2180      	movs	r1, #128	@ 0x80
 800041a:	03c9      	lsls	r1, r1, #15
 800041c:	430a      	orrs	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	4b22      	ldr	r3, [pc, #136]	@ (80004ac <MX_GPIO_Init+0xcc>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	2380      	movs	r3, #128	@ 0x80
 8000426:	03db      	lsls	r3, r3, #15
 8000428:	4013      	ands	r3, r2
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b1f      	ldr	r3, [pc, #124]	@ (80004ac <MX_GPIO_Init+0xcc>)
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	4b1e      	ldr	r3, [pc, #120]	@ (80004ac <MX_GPIO_Init+0xcc>)
 8000434:	2180      	movs	r1, #128	@ 0x80
 8000436:	0289      	lsls	r1, r1, #10
 8000438:	430a      	orrs	r2, r1
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ac <MX_GPIO_Init+0xcc>)
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	2380      	movs	r3, #128	@ 0x80
 8000442:	029b      	lsls	r3, r3, #10
 8000444:	4013      	ands	r3, r2
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800044a:	2390      	movs	r3, #144	@ 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	2120      	movs	r1, #32
 8000452:	0018      	movs	r0, r3
 8000454:	f000 fbfc 	bl	8000c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2280      	movs	r2, #128	@ 0x80
 800045c:	0192      	lsls	r2, r2, #6
 800045e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000460:	193b      	adds	r3, r7, r4
 8000462:	2284      	movs	r2, #132	@ 0x84
 8000464:	0392      	lsls	r2, r2, #14
 8000466:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	193b      	adds	r3, r7, r4
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800046e:	193b      	adds	r3, r7, r4
 8000470:	4a0f      	ldr	r2, [pc, #60]	@ (80004b0 <MX_GPIO_Init+0xd0>)
 8000472:	0019      	movs	r1, r3
 8000474:	0010      	movs	r0, r2
 8000476:	f000 fa7b 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800047a:	0021      	movs	r1, r4
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2220      	movs	r2, #32
 8000480:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2201      	movs	r2, #1
 8000486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2200      	movs	r2, #0
 8000492:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000494:	187a      	adds	r2, r7, r1
 8000496:	2390      	movs	r3, #144	@ 0x90
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f000 fa67 	bl	8000970 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b009      	add	sp, #36	@ 0x24
 80004a8:	bd90      	pop	{r4, r7, pc}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	40021000 	.word	0x40021000
 80004b0:	48000800 	.word	0x48000800

080004b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004bc:	2001      	movs	r0, #1
 80004be:	f001 feff 	bl	80022c0 <osDelay>
 80004c2:	e7fb      	b.n	80004bc <StartDefaultTask+0x8>

080004c4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004cc:	2390      	movs	r3, #144	@ 0x90
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	2120      	movs	r1, #32
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fbd9 	bl	8000c8a <HAL_GPIO_TogglePin>
    osDelay(200);
 80004d8:	20c8      	movs	r0, #200	@ 0xc8
 80004da:	f001 fef1 	bl	80022c0 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	e7f4      	b.n	80004cc <StartTask02+0x8>

080004e2 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004ea:	2390      	movs	r3, #144	@ 0x90
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2120      	movs	r1, #32
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fbca 	bl	8000c8a <HAL_GPIO_TogglePin>
    osDelay(500);
 80004f6:	23fa      	movs	r3, #250	@ 0xfa
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fee0 	bl	80022c0 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	e7f2      	b.n	80004ea <StartTask03+0x8>

08000504 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a04      	ldr	r2, [pc, #16]	@ (8000524 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d101      	bne.n	800051a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000516:	f000 f961 	bl	80007dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	40012c00 	.word	0x40012c00

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	e7fd      	b.n	8000530 <Error_Handler+0x8>

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <HAL_MspInit+0x50>)
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <HAL_MspInit+0x50>)
 8000540:	2101      	movs	r1, #1
 8000542:	430a      	orrs	r2, r1
 8000544:	619a      	str	r2, [r3, #24]
 8000546:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <HAL_MspInit+0x50>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	2201      	movs	r2, #1
 800054c:	4013      	ands	r3, r2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <HAL_MspInit+0x50>)
 8000554:	69da      	ldr	r2, [r3, #28]
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <HAL_MspInit+0x50>)
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	0549      	lsls	r1, r1, #21
 800055c:	430a      	orrs	r2, r1
 800055e:	61da      	str	r2, [r3, #28]
 8000560:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <HAL_MspInit+0x50>)
 8000562:	69da      	ldr	r2, [r3, #28]
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	055b      	lsls	r3, r3, #21
 8000568:	4013      	ands	r3, r2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800056e:	2302      	movs	r3, #2
 8000570:	425b      	negs	r3, r3
 8000572:	2200      	movs	r2, #0
 8000574:	2103      	movs	r1, #3
 8000576:	0018      	movs	r0, r3
 8000578:	f000 f9d4 	bl	8000924 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057c:	46c0      	nop			@ (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b002      	add	sp, #8
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000

08000588 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b08b      	sub	sp, #44	@ 0x2c
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	2414      	movs	r4, #20
 8000592:	193b      	adds	r3, r7, r4
 8000594:	0018      	movs	r0, r3
 8000596:	2314      	movs	r3, #20
 8000598:	001a      	movs	r2, r3
 800059a:	2100      	movs	r1, #0
 800059c:	f002 ff02 	bl	80033a4 <memset>
  if(huart->Instance==USART2)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000618 <HAL_UART_MspInit+0x90>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d132      	bne.n	8000610 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005aa:	4b1c      	ldr	r3, [pc, #112]	@ (800061c <HAL_UART_MspInit+0x94>)
 80005ac:	69da      	ldr	r2, [r3, #28]
 80005ae:	4b1b      	ldr	r3, [pc, #108]	@ (800061c <HAL_UART_MspInit+0x94>)
 80005b0:	2180      	movs	r1, #128	@ 0x80
 80005b2:	0289      	lsls	r1, r1, #10
 80005b4:	430a      	orrs	r2, r1
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	4b18      	ldr	r3, [pc, #96]	@ (800061c <HAL_UART_MspInit+0x94>)
 80005ba:	69da      	ldr	r2, [r3, #28]
 80005bc:	2380      	movs	r3, #128	@ 0x80
 80005be:	029b      	lsls	r3, r3, #10
 80005c0:	4013      	ands	r3, r2
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <HAL_UART_MspInit+0x94>)
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	4b14      	ldr	r3, [pc, #80]	@ (800061c <HAL_UART_MspInit+0x94>)
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	0289      	lsls	r1, r1, #10
 80005d0:	430a      	orrs	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	4b11      	ldr	r3, [pc, #68]	@ (800061c <HAL_UART_MspInit+0x94>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	2380      	movs	r3, #128	@ 0x80
 80005da:	029b      	lsls	r3, r3, #10
 80005dc:	4013      	ands	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005e2:	0021      	movs	r1, r4
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	220c      	movs	r2, #12
 80005e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2202      	movs	r2, #2
 80005ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2201      	movs	r2, #1
 8000600:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	187a      	adds	r2, r7, r1
 8000604:	2390      	movs	r3, #144	@ 0x90
 8000606:	05db      	lsls	r3, r3, #23
 8000608:	0011      	movs	r1, r2
 800060a:	0018      	movs	r0, r3
 800060c:	f000 f9b0 	bl	8000970 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b00b      	add	sp, #44	@ 0x2c
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	40004400 	.word	0x40004400
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b08c      	sub	sp, #48	@ 0x30
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000630:	4b38      	ldr	r3, [pc, #224]	@ (8000714 <HAL_InitTick+0xf4>)
 8000632:	699a      	ldr	r2, [r3, #24]
 8000634:	4b37      	ldr	r3, [pc, #220]	@ (8000714 <HAL_InitTick+0xf4>)
 8000636:	2180      	movs	r1, #128	@ 0x80
 8000638:	0109      	lsls	r1, r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	619a      	str	r2, [r3, #24]
 800063e:	4b35      	ldr	r3, [pc, #212]	@ (8000714 <HAL_InitTick+0xf4>)
 8000640:	699a      	ldr	r2, [r3, #24]
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	4013      	ands	r3, r2
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800064c:	230c      	movs	r3, #12
 800064e:	18fa      	adds	r2, r7, r3
 8000650:	2410      	movs	r4, #16
 8000652:	193b      	adds	r3, r7, r4
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f000 ff90 	bl	800157c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800065c:	193b      	adds	r3, r7, r4
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000668:	f000 ff72 	bl	8001550 <HAL_RCC_GetPCLK1Freq>
 800066c:	0003      	movs	r3, r0
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000670:	e004      	b.n	800067c <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000672:	f000 ff6d 	bl	8001550 <HAL_RCC_GetPCLK1Freq>
 8000676:	0003      	movs	r3, r0
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800067c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800067e:	4926      	ldr	r1, [pc, #152]	@ (8000718 <HAL_InitTick+0xf8>)
 8000680:	0018      	movs	r0, r3
 8000682:	f7ff fd41 	bl	8000108 <__udivsi3>
 8000686:	0003      	movs	r3, r0
 8000688:	3b01      	subs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800068c:	4b23      	ldr	r3, [pc, #140]	@ (800071c <HAL_InitTick+0xfc>)
 800068e:	4a24      	ldr	r2, [pc, #144]	@ (8000720 <HAL_InitTick+0x100>)
 8000690:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000692:	4b22      	ldr	r3, [pc, #136]	@ (800071c <HAL_InitTick+0xfc>)
 8000694:	4a23      	ldr	r2, [pc, #140]	@ (8000724 <HAL_InitTick+0x104>)
 8000696:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000698:	4b20      	ldr	r3, [pc, #128]	@ (800071c <HAL_InitTick+0xfc>)
 800069a:	6a3a      	ldr	r2, [r7, #32]
 800069c:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 800069e:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <HAL_InitTick+0xfc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <HAL_InitTick+0xfc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	@ (800071c <HAL_InitTick+0xfc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80006b0:	252b      	movs	r5, #43	@ 0x2b
 80006b2:	197c      	adds	r4, r7, r5
 80006b4:	4b19      	ldr	r3, [pc, #100]	@ (800071c <HAL_InitTick+0xfc>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 ff8a 	bl	80015d0 <HAL_TIM_Base_Init>
 80006bc:	0003      	movs	r3, r0
 80006be:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80006c0:	197b      	adds	r3, r7, r5
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d11e      	bne.n	8000706 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80006c8:	197c      	adds	r4, r7, r5
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <HAL_InitTick+0xfc>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 ffd7 	bl	8001680 <HAL_TIM_Base_Start_IT>
 80006d2:	0003      	movs	r3, r0
 80006d4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80006d6:	197b      	adds	r3, r7, r5
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d113      	bne.n	8000706 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80006de:	200d      	movs	r0, #13
 80006e0:	f000 f935 	bl	800094e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d809      	bhi.n	80006fe <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	0019      	movs	r1, r3
 80006f0:	200d      	movs	r0, #13
 80006f2:	f000 f917 	bl	8000924 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <HAL_InitTick+0x108>)
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	e003      	b.n	8000706 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80006fe:	232b      	movs	r3, #43	@ 0x2b
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000706:	232b      	movs	r3, #43	@ 0x2b
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	781b      	ldrb	r3, [r3, #0]
}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	b00c      	add	sp, #48	@ 0x30
 8000712:	bdb0      	pop	{r4, r5, r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	000f4240 	.word	0x000f4240
 800071c:	200003b0 	.word	0x200003b0
 8000720:	40012c00 	.word	0x40012c00
 8000724:	000003e7 	.word	0x000003e7
 8000728:	20000004 	.word	0x20000004

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	e7fd      	b.n	8000730 <NMI_Handler+0x4>

08000734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	e7fd      	b.n	8000738 <HardFault_Handler+0x4>

0800073c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000740:	4b03      	ldr	r3, [pc, #12]	@ (8000750 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000742:	0018      	movs	r0, r3
 8000744:	f000 ffe8 	bl	8001718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	200003b0 	.word	0x200003b0

08000754 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000760:	480d      	ldr	r0, [pc, #52]	@ (8000798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000762:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000764:	f7ff fff6 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <LoopForever+0x6>)
  ldr r1, =_edata
 800076a:	490d      	ldr	r1, [pc, #52]	@ (80007a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <LoopForever+0xe>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000770:	e002      	b.n	8000778 <LoopCopyDataInit>

08000772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000776:	3304      	adds	r3, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800077c:	d3f9      	bcc.n	8000772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077e:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000780:	4c0a      	ldr	r4, [pc, #40]	@ (80007ac <LoopForever+0x16>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000784:	e001      	b.n	800078a <LoopFillZerobss>

08000786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000788:	3204      	adds	r2, #4

0800078a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800078c:	d3fb      	bcc.n	8000786 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800078e:	f002 fe7b 	bl	8003488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000792:	f7ff fd5d 	bl	8000250 <main>

08000796 <LoopForever>:

LoopForever:
    b LoopForever
 8000796:	e7fe      	b.n	8000796 <LoopForever>
  ldr   r0, =_estack
 8000798:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007a4:	08003658 	.word	0x08003658
  ldr r2, =_sbss
 80007a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007ac:	20001280 	.word	0x20001280

080007b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_IRQHandler>
	...

080007b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <HAL_Init+0x24>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <HAL_Init+0x24>)
 80007be:	2110      	movs	r1, #16
 80007c0:	430a      	orrs	r2, r1
 80007c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff ff2b 	bl	8000620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ca:	f7ff feb3 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ce:	2300      	movs	r3, #0
}
 80007d0:	0018      	movs	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	40022000 	.word	0x40022000

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <HAL_IncTick+0x1c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	001a      	movs	r2, r3
 80007e6:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <HAL_IncTick+0x20>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	18d2      	adds	r2, r2, r3
 80007ec:	4b03      	ldr	r3, [pc, #12]	@ (80007fc <HAL_IncTick+0x20>)
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	20000008 	.word	0x20000008
 80007fc:	200003f8 	.word	0x200003f8

08000800 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;
 8000804:	4b02      	ldr	r3, [pc, #8]	@ (8000810 <HAL_GetTick+0x10>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	200003f8 	.word	0x200003f8

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	0002      	movs	r2, r0
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b7f      	cmp	r3, #127	@ 0x7f
 8000826:	d809      	bhi.n	800083c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	001a      	movs	r2, r3
 800082e:	231f      	movs	r3, #31
 8000830:	401a      	ands	r2, r3
 8000832:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <__NVIC_EnableIRQ+0x30>)
 8000834:	2101      	movs	r1, #1
 8000836:	4091      	lsls	r1, r2
 8000838:	000a      	movs	r2, r1
 800083a:	601a      	str	r2, [r3, #0]
  }
}
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b002      	add	sp, #8
 8000842:	bd80      	pop	{r7, pc}
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	0002      	movs	r2, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b7f      	cmp	r3, #127	@ 0x7f
 800085c:	d828      	bhi.n	80008b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800085e:	4a2f      	ldr	r2, [pc, #188]	@ (800091c <__NVIC_SetPriority+0xd4>)
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b25b      	sxtb	r3, r3
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	33c0      	adds	r3, #192	@ 0xc0
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	589b      	ldr	r3, [r3, r2]
 800086e:	1dfa      	adds	r2, r7, #7
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	0011      	movs	r1, r2
 8000874:	2203      	movs	r2, #3
 8000876:	400a      	ands	r2, r1
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	21ff      	movs	r1, #255	@ 0xff
 800087c:	4091      	lsls	r1, r2
 800087e:	000a      	movs	r2, r1
 8000880:	43d2      	mvns	r2, r2
 8000882:	401a      	ands	r2, r3
 8000884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	019b      	lsls	r3, r3, #6
 800088a:	22ff      	movs	r2, #255	@ 0xff
 800088c:	401a      	ands	r2, r3
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	0018      	movs	r0, r3
 8000894:	2303      	movs	r3, #3
 8000896:	4003      	ands	r3, r0
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089c:	481f      	ldr	r0, [pc, #124]	@ (800091c <__NVIC_SetPriority+0xd4>)
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	089b      	lsrs	r3, r3, #2
 80008a6:	430a      	orrs	r2, r1
 80008a8:	33c0      	adds	r3, #192	@ 0xc0
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008ae:	e031      	b.n	8000914 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000920 <__NVIC_SetPriority+0xd8>)
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0019      	movs	r1, r3
 80008b8:	230f      	movs	r3, #15
 80008ba:	400b      	ands	r3, r1
 80008bc:	3b08      	subs	r3, #8
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	3306      	adds	r3, #6
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	18d3      	adds	r3, r2, r3
 80008c6:	3304      	adds	r3, #4
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1dfa      	adds	r2, r7, #7
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	0011      	movs	r1, r2
 80008d0:	2203      	movs	r2, #3
 80008d2:	400a      	ands	r2, r1
 80008d4:	00d2      	lsls	r2, r2, #3
 80008d6:	21ff      	movs	r1, #255	@ 0xff
 80008d8:	4091      	lsls	r1, r2
 80008da:	000a      	movs	r2, r1
 80008dc:	43d2      	mvns	r2, r2
 80008de:	401a      	ands	r2, r3
 80008e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	019b      	lsls	r3, r3, #6
 80008e6:	22ff      	movs	r2, #255	@ 0xff
 80008e8:	401a      	ands	r2, r3
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0018      	movs	r0, r3
 80008f0:	2303      	movs	r3, #3
 80008f2:	4003      	ands	r3, r0
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	4809      	ldr	r0, [pc, #36]	@ (8000920 <__NVIC_SetPriority+0xd8>)
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	001c      	movs	r4, r3
 8000900:	230f      	movs	r3, #15
 8000902:	4023      	ands	r3, r4
 8000904:	3b08      	subs	r3, #8
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	430a      	orrs	r2, r1
 800090a:	3306      	adds	r3, #6
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	18c3      	adds	r3, r0, r3
 8000910:	3304      	adds	r3, #4
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b003      	add	sp, #12
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	210f      	movs	r1, #15
 8000930:	187b      	adds	r3, r7, r1
 8000932:	1c02      	adds	r2, r0, #0
 8000934:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	187b      	adds	r3, r7, r1
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b25b      	sxtb	r3, r3
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff ff81 	bl	8000848 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b004      	add	sp, #16
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	0002      	movs	r2, r0
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b25b      	sxtb	r3, r3
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff ff57 	bl	8000814 <__NVIC_EnableIRQ>
}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b002      	add	sp, #8
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097e:	e14f      	b.n	8000c20 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2101      	movs	r1, #1
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	4091      	lsls	r1, r2
 800098a:	000a      	movs	r2, r1
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d100      	bne.n	8000998 <HAL_GPIO_Init+0x28>
 8000996:	e140      	b.n	8000c1a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	2203      	movs	r2, #3
 800099e:	4013      	ands	r3, r2
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d005      	beq.n	80009b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	2203      	movs	r2, #3
 80009aa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d130      	bne.n	8000a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2203      	movs	r2, #3
 80009bc:	409a      	lsls	r2, r3
 80009be:	0013      	movs	r3, r2
 80009c0:	43da      	mvns	r2, r3
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	409a      	lsls	r2, r3
 80009d2:	0013      	movs	r3, r2
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e6:	2201      	movs	r2, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
 80009ec:	0013      	movs	r3, r2
 80009ee:	43da      	mvns	r2, r3
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	091b      	lsrs	r3, r3, #4
 80009fc:	2201      	movs	r2, #1
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2203      	movs	r2, #3
 8000a18:	4013      	ands	r3, r2
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d017      	beq.n	8000a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2203      	movs	r2, #3
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	0013      	movs	r3, r2
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	2203      	movs	r2, #3
 8000a54:	4013      	ands	r3, r2
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d123      	bne.n	8000aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	08da      	lsrs	r2, r3, #3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3208      	adds	r2, #8
 8000a62:	0092      	lsls	r2, r2, #2
 8000a64:	58d3      	ldr	r3, [r2, r3]
 8000a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	220f      	movs	r2, #15
 8000a72:	409a      	lsls	r2, r3
 8000a74:	0013      	movs	r3, r2
 8000a76:	43da      	mvns	r2, r3
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	691a      	ldr	r2, [r3, #16]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	2107      	movs	r1, #7
 8000a86:	400b      	ands	r3, r1
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	08da      	lsrs	r2, r3, #3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3208      	adds	r2, #8
 8000a9c:	0092      	lsls	r2, r2, #2
 8000a9e:	6939      	ldr	r1, [r7, #16]
 8000aa0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2203      	movs	r2, #3
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	0013      	movs	r3, r2
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2203      	movs	r2, #3
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	0013      	movs	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	23c0      	movs	r3, #192	@ 0xc0
 8000adc:	029b      	lsls	r3, r3, #10
 8000ade:	4013      	ands	r3, r2
 8000ae0:	d100      	bne.n	8000ae4 <HAL_GPIO_Init+0x174>
 8000ae2:	e09a      	b.n	8000c1a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae4:	4b54      	ldr	r3, [pc, #336]	@ (8000c38 <HAL_GPIO_Init+0x2c8>)
 8000ae6:	699a      	ldr	r2, [r3, #24]
 8000ae8:	4b53      	ldr	r3, [pc, #332]	@ (8000c38 <HAL_GPIO_Init+0x2c8>)
 8000aea:	2101      	movs	r1, #1
 8000aec:	430a      	orrs	r2, r1
 8000aee:	619a      	str	r2, [r3, #24]
 8000af0:	4b51      	ldr	r3, [pc, #324]	@ (8000c38 <HAL_GPIO_Init+0x2c8>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	2201      	movs	r2, #1
 8000af6:	4013      	ands	r3, r2
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000afc:	4a4f      	ldr	r2, [pc, #316]	@ (8000c3c <HAL_GPIO_Init+0x2cc>)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	3302      	adds	r3, #2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	589b      	ldr	r3, [r3, r2]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	4013      	ands	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	220f      	movs	r2, #15
 8000b14:	409a      	lsls	r2, r3
 8000b16:	0013      	movs	r3, r2
 8000b18:	43da      	mvns	r2, r3
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	2390      	movs	r3, #144	@ 0x90
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d013      	beq.n	8000b52 <HAL_GPIO_Init+0x1e2>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a44      	ldr	r2, [pc, #272]	@ (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d00d      	beq.n	8000b4e <HAL_GPIO_Init+0x1de>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a43      	ldr	r2, [pc, #268]	@ (8000c44 <HAL_GPIO_Init+0x2d4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d007      	beq.n	8000b4a <HAL_GPIO_Init+0x1da>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a42      	ldr	r2, [pc, #264]	@ (8000c48 <HAL_GPIO_Init+0x2d8>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_GPIO_Init+0x1d6>
 8000b42:	2303      	movs	r3, #3
 8000b44:	e006      	b.n	8000b54 <HAL_GPIO_Init+0x1e4>
 8000b46:	2305      	movs	r3, #5
 8000b48:	e004      	b.n	8000b54 <HAL_GPIO_Init+0x1e4>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	e002      	b.n	8000b54 <HAL_GPIO_Init+0x1e4>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <HAL_GPIO_Init+0x1e4>
 8000b52:	2300      	movs	r3, #0
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	2103      	movs	r1, #3
 8000b58:	400a      	ands	r2, r1
 8000b5a:	0092      	lsls	r2, r2, #2
 8000b5c:	4093      	lsls	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b64:	4935      	ldr	r1, [pc, #212]	@ (8000c3c <HAL_GPIO_Init+0x2cc>)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b72:	4b36      	ldr	r3, [pc, #216]	@ (8000c4c <HAL_GPIO_Init+0x2dc>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	2380      	movs	r3, #128	@ 0x80
 8000b88:	035b      	lsls	r3, r3, #13
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b96:	4b2d      	ldr	r3, [pc, #180]	@ (8000c4c <HAL_GPIO_Init+0x2dc>)
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c4c <HAL_GPIO_Init+0x2dc>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	43da      	mvns	r2, r3
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	2380      	movs	r3, #128	@ 0x80
 8000bb2:	039b      	lsls	r3, r3, #14
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bc0:	4b22      	ldr	r3, [pc, #136]	@ (8000c4c <HAL_GPIO_Init+0x2dc>)
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	@ (8000c4c <HAL_GPIO_Init+0x2dc>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	2380      	movs	r3, #128	@ 0x80
 8000bdc:	029b      	lsls	r3, r3, #10
 8000bde:	4013      	ands	r3, r2
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <HAL_GPIO_Init+0x2dc>)
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <HAL_GPIO_Init+0x2dc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	43da      	mvns	r2, r3
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	2380      	movs	r3, #128	@ 0x80
 8000c06:	025b      	lsls	r3, r3, #9
 8000c08:	4013      	ands	r3, r2
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <HAL_GPIO_Init+0x2dc>)
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	40da      	lsrs	r2, r3
 8000c28:	1e13      	subs	r3, r2, #0
 8000c2a:	d000      	beq.n	8000c2e <HAL_GPIO_Init+0x2be>
 8000c2c:	e6a8      	b.n	8000980 <HAL_GPIO_Init+0x10>
  } 
}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b006      	add	sp, #24
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	48000400 	.word	0x48000400
 8000c44:	48000800 	.word	0x48000800
 8000c48:	48000c00 	.word	0x48000c00
 8000c4c:	40010400 	.word	0x40010400

08000c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	0008      	movs	r0, r1
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	1cbb      	adds	r3, r7, #2
 8000c5e:	1c02      	adds	r2, r0, #0
 8000c60:	801a      	strh	r2, [r3, #0]
 8000c62:	1c7b      	adds	r3, r7, #1
 8000c64:	1c0a      	adds	r2, r1, #0
 8000c66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c68:	1c7b      	adds	r3, r7, #1
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c70:	1cbb      	adds	r3, r7, #2
 8000c72:	881a      	ldrh	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c78:	e003      	b.n	8000c82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c7a:	1cbb      	adds	r3, r7, #2
 8000c7c:	881a      	ldrh	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b084      	sub	sp, #16
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	000a      	movs	r2, r1
 8000c94:	1cbb      	adds	r3, r7, #2
 8000c96:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c9e:	1cbb      	adds	r3, r7, #2
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	041a      	lsls	r2, r3, #16
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	1cb9      	adds	r1, r7, #2
 8000cae:	8809      	ldrh	r1, [r1, #0]
 8000cb0:	400b      	ands	r3, r1
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]
}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b004      	add	sp, #16
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e301      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4013      	ands	r3, r2
 8000cda:	d100      	bne.n	8000cde <HAL_RCC_OscConfig+0x1e>
 8000cdc:	e08d      	b.n	8000dfa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cde:	4bc3      	ldr	r3, [pc, #780]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d00e      	beq.n	8000d08 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cea:	4bc0      	ldr	r3, [pc, #768]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	220c      	movs	r2, #12
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2b08      	cmp	r3, #8
 8000cf4:	d116      	bne.n	8000d24 <HAL_RCC_OscConfig+0x64>
 8000cf6:	4bbd      	ldr	r3, [pc, #756]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	2380      	movs	r3, #128	@ 0x80
 8000cfc:	025b      	lsls	r3, r3, #9
 8000cfe:	401a      	ands	r2, r3
 8000d00:	2380      	movs	r3, #128	@ 0x80
 8000d02:	025b      	lsls	r3, r3, #9
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d10d      	bne.n	8000d24 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d08:	4bb8      	ldr	r3, [pc, #736]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	2380      	movs	r3, #128	@ 0x80
 8000d0e:	029b      	lsls	r3, r3, #10
 8000d10:	4013      	ands	r3, r2
 8000d12:	d100      	bne.n	8000d16 <HAL_RCC_OscConfig+0x56>
 8000d14:	e070      	b.n	8000df8 <HAL_RCC_OscConfig+0x138>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d000      	beq.n	8000d20 <HAL_RCC_OscConfig+0x60>
 8000d1e:	e06b      	b.n	8000df8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e2d8      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d107      	bne.n	8000d3c <HAL_RCC_OscConfig+0x7c>
 8000d2c:	4baf      	ldr	r3, [pc, #700]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4bae      	ldr	r3, [pc, #696]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d32:	2180      	movs	r1, #128	@ 0x80
 8000d34:	0249      	lsls	r1, r1, #9
 8000d36:	430a      	orrs	r2, r1
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	e02f      	b.n	8000d9c <HAL_RCC_OscConfig+0xdc>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10c      	bne.n	8000d5e <HAL_RCC_OscConfig+0x9e>
 8000d44:	4ba9      	ldr	r3, [pc, #676]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4ba8      	ldr	r3, [pc, #672]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d4a:	49a9      	ldr	r1, [pc, #676]	@ (8000ff0 <HAL_RCC_OscConfig+0x330>)
 8000d4c:	400a      	ands	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	4ba6      	ldr	r3, [pc, #664]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4ba5      	ldr	r3, [pc, #660]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d56:	49a7      	ldr	r1, [pc, #668]	@ (8000ff4 <HAL_RCC_OscConfig+0x334>)
 8000d58:	400a      	ands	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	e01e      	b.n	8000d9c <HAL_RCC_OscConfig+0xdc>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b05      	cmp	r3, #5
 8000d64:	d10e      	bne.n	8000d84 <HAL_RCC_OscConfig+0xc4>
 8000d66:	4ba1      	ldr	r3, [pc, #644]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4ba0      	ldr	r3, [pc, #640]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d6c:	2180      	movs	r1, #128	@ 0x80
 8000d6e:	02c9      	lsls	r1, r1, #11
 8000d70:	430a      	orrs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	4b9d      	ldr	r3, [pc, #628]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b9c      	ldr	r3, [pc, #624]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d7a:	2180      	movs	r1, #128	@ 0x80
 8000d7c:	0249      	lsls	r1, r1, #9
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	e00b      	b.n	8000d9c <HAL_RCC_OscConfig+0xdc>
 8000d84:	4b99      	ldr	r3, [pc, #612]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b98      	ldr	r3, [pc, #608]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d8a:	4999      	ldr	r1, [pc, #612]	@ (8000ff0 <HAL_RCC_OscConfig+0x330>)
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	4b96      	ldr	r3, [pc, #600]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b95      	ldr	r3, [pc, #596]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000d96:	4997      	ldr	r1, [pc, #604]	@ (8000ff4 <HAL_RCC_OscConfig+0x334>)
 8000d98:	400a      	ands	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d014      	beq.n	8000dce <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fd2c 	bl	8000800 <HAL_GetTick>
 8000da8:	0003      	movs	r3, r0
 8000daa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dac:	e008      	b.n	8000dc0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dae:	f7ff fd27 	bl	8000800 <HAL_GetTick>
 8000db2:	0002      	movs	r2, r0
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b64      	cmp	r3, #100	@ 0x64
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e28a      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc0:	4b8a      	ldr	r3, [pc, #552]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	2380      	movs	r3, #128	@ 0x80
 8000dc6:	029b      	lsls	r3, r3, #10
 8000dc8:	4013      	ands	r3, r2
 8000dca:	d0f0      	beq.n	8000dae <HAL_RCC_OscConfig+0xee>
 8000dcc:	e015      	b.n	8000dfa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dce:	f7ff fd17 	bl	8000800 <HAL_GetTick>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dd8:	f7ff fd12 	bl	8000800 <HAL_GetTick>
 8000ddc:	0002      	movs	r2, r0
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b64      	cmp	r3, #100	@ 0x64
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e275      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dea:	4b80      	ldr	r3, [pc, #512]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	2380      	movs	r3, #128	@ 0x80
 8000df0:	029b      	lsls	r3, r3, #10
 8000df2:	4013      	ands	r3, r2
 8000df4:	d1f0      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x118>
 8000df6:	e000      	b.n	8000dfa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2202      	movs	r2, #2
 8000e00:	4013      	ands	r3, r2
 8000e02:	d100      	bne.n	8000e06 <HAL_RCC_OscConfig+0x146>
 8000e04:	e069      	b.n	8000eda <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e06:	4b79      	ldr	r3, [pc, #484]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d00b      	beq.n	8000e28 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e10:	4b76      	ldr	r3, [pc, #472]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	220c      	movs	r2, #12
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d11c      	bne.n	8000e56 <HAL_RCC_OscConfig+0x196>
 8000e1c:	4b73      	ldr	r3, [pc, #460]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	025b      	lsls	r3, r3, #9
 8000e24:	4013      	ands	r3, r2
 8000e26:	d116      	bne.n	8000e56 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e28:	4b70      	ldr	r3, [pc, #448]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d005      	beq.n	8000e3e <HAL_RCC_OscConfig+0x17e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d001      	beq.n	8000e3e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e24b      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3e:	4b6b      	ldr	r3, [pc, #428]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	22f8      	movs	r2, #248	@ 0xf8
 8000e44:	4393      	bics	r3, r2
 8000e46:	0019      	movs	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	00da      	lsls	r2, r3, #3
 8000e4e:	4b67      	ldr	r3, [pc, #412]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000e50:	430a      	orrs	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e54:	e041      	b.n	8000eda <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d024      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e5e:	4b63      	ldr	r3, [pc, #396]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b62      	ldr	r3, [pc, #392]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000e64:	2101      	movs	r1, #1
 8000e66:	430a      	orrs	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fcc9 	bl	8000800 <HAL_GetTick>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e74:	f7ff fcc4 	bl	8000800 <HAL_GetTick>
 8000e78:	0002      	movs	r2, r0
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e227      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e86:	4b59      	ldr	r3, [pc, #356]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d0f1      	beq.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e90:	4b56      	ldr	r3, [pc, #344]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	22f8      	movs	r2, #248	@ 0xf8
 8000e96:	4393      	bics	r3, r2
 8000e98:	0019      	movs	r1, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	00da      	lsls	r2, r3, #3
 8000ea0:	4b52      	ldr	r3, [pc, #328]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e018      	b.n	8000eda <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea8:	4b50      	ldr	r3, [pc, #320]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b4f      	ldr	r3, [pc, #316]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	438a      	bics	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fca4 	bl	8000800 <HAL_GetTick>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ebe:	f7ff fc9f 	bl	8000800 <HAL_GetTick>
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e202      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed0:	4b46      	ldr	r3, [pc, #280]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d1f1      	bne.n	8000ebe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2208      	movs	r2, #8
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d036      	beq.n	8000f52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d019      	beq.n	8000f20 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eec:	4b3f      	ldr	r3, [pc, #252]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000eee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef8:	f7ff fc82 	bl	8000800 <HAL_GetTick>
 8000efc:	0003      	movs	r3, r0
 8000efe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f02:	f7ff fc7d 	bl	8000800 <HAL_GetTick>
 8000f06:	0002      	movs	r2, r0
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e1e0      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f14:	4b35      	ldr	r3, [pc, #212]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f18:	2202      	movs	r2, #2
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d0f1      	beq.n	8000f02 <HAL_RCC_OscConfig+0x242>
 8000f1e:	e018      	b.n	8000f52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f20:	4b32      	ldr	r3, [pc, #200]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f24:	4b31      	ldr	r3, [pc, #196]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	438a      	bics	r2, r1
 8000f2a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2c:	f7ff fc68 	bl	8000800 <HAL_GetTick>
 8000f30:	0003      	movs	r3, r0
 8000f32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f36:	f7ff fc63 	bl	8000800 <HAL_GetTick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e1c6      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d1f1      	bne.n	8000f36 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2204      	movs	r2, #4
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d100      	bne.n	8000f5e <HAL_RCC_OscConfig+0x29e>
 8000f5c:	e0b4      	b.n	80010c8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f5e:	201f      	movs	r0, #31
 8000f60:	183b      	adds	r3, r7, r0
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000f68:	69da      	ldr	r2, [r3, #28]
 8000f6a:	2380      	movs	r3, #128	@ 0x80
 8000f6c:	055b      	lsls	r3, r3, #21
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d110      	bne.n	8000f94 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000f74:	69da      	ldr	r2, [r3, #28]
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000f78:	2180      	movs	r1, #128	@ 0x80
 8000f7a:	0549      	lsls	r1, r1, #21
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	61da      	str	r2, [r3, #28]
 8000f80:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000f82:	69da      	ldr	r2, [r3, #28]
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	055b      	lsls	r3, r3, #21
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f8e:	183b      	adds	r3, r7, r0
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_RCC_OscConfig+0x338>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	2380      	movs	r3, #128	@ 0x80
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d11a      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_RCC_OscConfig+0x338>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <HAL_RCC_OscConfig+0x338>)
 8000fa6:	2180      	movs	r1, #128	@ 0x80
 8000fa8:	0049      	lsls	r1, r1, #1
 8000faa:	430a      	orrs	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fae:	f7ff fc27 	bl	8000800 <HAL_GetTick>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb8:	f7ff fc22 	bl	8000800 <HAL_GetTick>
 8000fbc:	0002      	movs	r2, r0
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b64      	cmp	r3, #100	@ 0x64
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e185      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <HAL_RCC_OscConfig+0x338>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	2380      	movs	r3, #128	@ 0x80
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d0f0      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d10e      	bne.n	8000ffc <HAL_RCC_OscConfig+0x33c>
 8000fde:	4b03      	ldr	r3, [pc, #12]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000fe0:	6a1a      	ldr	r2, [r3, #32]
 8000fe2:	4b02      	ldr	r3, [pc, #8]	@ (8000fec <HAL_RCC_OscConfig+0x32c>)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	621a      	str	r2, [r3, #32]
 8000fea:	e035      	b.n	8001058 <HAL_RCC_OscConfig+0x398>
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	fffeffff 	.word	0xfffeffff
 8000ff4:	fffbffff 	.word	0xfffbffff
 8000ff8:	40007000 	.word	0x40007000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10c      	bne.n	800101e <HAL_RCC_OscConfig+0x35e>
 8001004:	4bb6      	ldr	r3, [pc, #728]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001006:	6a1a      	ldr	r2, [r3, #32]
 8001008:	4bb5      	ldr	r3, [pc, #724]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800100a:	2101      	movs	r1, #1
 800100c:	438a      	bics	r2, r1
 800100e:	621a      	str	r2, [r3, #32]
 8001010:	4bb3      	ldr	r3, [pc, #716]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001012:	6a1a      	ldr	r2, [r3, #32]
 8001014:	4bb2      	ldr	r3, [pc, #712]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001016:	2104      	movs	r1, #4
 8001018:	438a      	bics	r2, r1
 800101a:	621a      	str	r2, [r3, #32]
 800101c:	e01c      	b.n	8001058 <HAL_RCC_OscConfig+0x398>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b05      	cmp	r3, #5
 8001024:	d10c      	bne.n	8001040 <HAL_RCC_OscConfig+0x380>
 8001026:	4bae      	ldr	r3, [pc, #696]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001028:	6a1a      	ldr	r2, [r3, #32]
 800102a:	4bad      	ldr	r3, [pc, #692]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800102c:	2104      	movs	r1, #4
 800102e:	430a      	orrs	r2, r1
 8001030:	621a      	str	r2, [r3, #32]
 8001032:	4bab      	ldr	r3, [pc, #684]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001034:	6a1a      	ldr	r2, [r3, #32]
 8001036:	4baa      	ldr	r3, [pc, #680]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001038:	2101      	movs	r1, #1
 800103a:	430a      	orrs	r2, r1
 800103c:	621a      	str	r2, [r3, #32]
 800103e:	e00b      	b.n	8001058 <HAL_RCC_OscConfig+0x398>
 8001040:	4ba7      	ldr	r3, [pc, #668]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001042:	6a1a      	ldr	r2, [r3, #32]
 8001044:	4ba6      	ldr	r3, [pc, #664]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001046:	2101      	movs	r1, #1
 8001048:	438a      	bics	r2, r1
 800104a:	621a      	str	r2, [r3, #32]
 800104c:	4ba4      	ldr	r3, [pc, #656]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800104e:	6a1a      	ldr	r2, [r3, #32]
 8001050:	4ba3      	ldr	r3, [pc, #652]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001052:	2104      	movs	r1, #4
 8001054:	438a      	bics	r2, r1
 8001056:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d014      	beq.n	800108a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001060:	f7ff fbce 	bl	8000800 <HAL_GetTick>
 8001064:	0003      	movs	r3, r0
 8001066:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	e009      	b.n	800107e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800106a:	f7ff fbc9 	bl	8000800 <HAL_GetTick>
 800106e:	0002      	movs	r2, r0
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	4a9b      	ldr	r2, [pc, #620]	@ (80012e4 <HAL_RCC_OscConfig+0x624>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e12b      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107e:	4b98      	ldr	r3, [pc, #608]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	2202      	movs	r2, #2
 8001084:	4013      	ands	r3, r2
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x3aa>
 8001088:	e013      	b.n	80010b2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108a:	f7ff fbb9 	bl	8000800 <HAL_GetTick>
 800108e:	0003      	movs	r3, r0
 8001090:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001092:	e009      	b.n	80010a8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001094:	f7ff fbb4 	bl	8000800 <HAL_GetTick>
 8001098:	0002      	movs	r2, r0
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	4a91      	ldr	r2, [pc, #580]	@ (80012e4 <HAL_RCC_OscConfig+0x624>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e116      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a8:	4b8d      	ldr	r3, [pc, #564]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	2202      	movs	r2, #2
 80010ae:	4013      	ands	r3, r2
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010b2:	231f      	movs	r3, #31
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d105      	bne.n	80010c8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010bc:	4b88      	ldr	r3, [pc, #544]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80010be:	69da      	ldr	r2, [r3, #28]
 80010c0:	4b87      	ldr	r3, [pc, #540]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80010c2:	4989      	ldr	r1, [pc, #548]	@ (80012e8 <HAL_RCC_OscConfig+0x628>)
 80010c4:	400a      	ands	r2, r1
 80010c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2210      	movs	r2, #16
 80010ce:	4013      	ands	r3, r2
 80010d0:	d063      	beq.n	800119a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d12a      	bne.n	8001130 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010da:	4b81      	ldr	r3, [pc, #516]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80010dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010de:	4b80      	ldr	r3, [pc, #512]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80010e0:	2104      	movs	r1, #4
 80010e2:	430a      	orrs	r2, r1
 80010e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010e6:	4b7e      	ldr	r3, [pc, #504]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80010e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010ea:	4b7d      	ldr	r3, [pc, #500]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fb85 	bl	8000800 <HAL_GetTick>
 80010f6:	0003      	movs	r3, r0
 80010f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010fc:	f7ff fb80 	bl	8000800 <HAL_GetTick>
 8001100:	0002      	movs	r2, r0
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e0e3      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800110e:	4b74      	ldr	r3, [pc, #464]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001112:	2202      	movs	r2, #2
 8001114:	4013      	ands	r3, r2
 8001116:	d0f1      	beq.n	80010fc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001118:	4b71      	ldr	r3, [pc, #452]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800111a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800111c:	22f8      	movs	r2, #248	@ 0xf8
 800111e:	4393      	bics	r3, r2
 8001120:	0019      	movs	r1, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	00da      	lsls	r2, r3, #3
 8001128:	4b6d      	ldr	r3, [pc, #436]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800112a:	430a      	orrs	r2, r1
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34
 800112e:	e034      	b.n	800119a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	3305      	adds	r3, #5
 8001136:	d111      	bne.n	800115c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001138:	4b69      	ldr	r3, [pc, #420]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800113a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800113c:	4b68      	ldr	r3, [pc, #416]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800113e:	2104      	movs	r1, #4
 8001140:	438a      	bics	r2, r1
 8001142:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001144:	4b66      	ldr	r3, [pc, #408]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001148:	22f8      	movs	r2, #248	@ 0xf8
 800114a:	4393      	bics	r3, r2
 800114c:	0019      	movs	r1, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	00da      	lsls	r2, r3, #3
 8001154:	4b62      	ldr	r3, [pc, #392]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001156:	430a      	orrs	r2, r1
 8001158:	635a      	str	r2, [r3, #52]	@ 0x34
 800115a:	e01e      	b.n	800119a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800115c:	4b60      	ldr	r3, [pc, #384]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800115e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001160:	4b5f      	ldr	r3, [pc, #380]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001162:	2104      	movs	r1, #4
 8001164:	430a      	orrs	r2, r1
 8001166:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001168:	4b5d      	ldr	r3, [pc, #372]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800116a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800116c:	4b5c      	ldr	r3, [pc, #368]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800116e:	2101      	movs	r1, #1
 8001170:	438a      	bics	r2, r1
 8001172:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fb44 	bl	8000800 <HAL_GetTick>
 8001178:	0003      	movs	r3, r0
 800117a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800117e:	f7ff fb3f 	bl	8000800 <HAL_GetTick>
 8001182:	0002      	movs	r2, r0
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e0a2      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001190:	4b53      	ldr	r3, [pc, #332]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001194:	2202      	movs	r2, #2
 8001196:	4013      	ands	r3, r2
 8001198:	d1f1      	bne.n	800117e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d100      	bne.n	80011a4 <HAL_RCC_OscConfig+0x4e4>
 80011a2:	e097      	b.n	80012d4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a4:	4b4e      	ldr	r3, [pc, #312]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	220c      	movs	r2, #12
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d100      	bne.n	80011b2 <HAL_RCC_OscConfig+0x4f2>
 80011b0:	e06b      	b.n	800128a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d14c      	bne.n	8001254 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ba:	4b49      	ldr	r3, [pc, #292]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b48      	ldr	r3, [pc, #288]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80011c0:	494a      	ldr	r1, [pc, #296]	@ (80012ec <HAL_RCC_OscConfig+0x62c>)
 80011c2:	400a      	ands	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fb1b 	bl	8000800 <HAL_GetTick>
 80011ca:	0003      	movs	r3, r0
 80011cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011d0:	f7ff fb16 	bl	8000800 <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e079      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e2:	4b3f      	ldr	r3, [pc, #252]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	049b      	lsls	r3, r3, #18
 80011ea:	4013      	ands	r3, r2
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ee:	4b3c      	ldr	r3, [pc, #240]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80011f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f2:	220f      	movs	r2, #15
 80011f4:	4393      	bics	r3, r2
 80011f6:	0019      	movs	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011fc:	4b38      	ldr	r3, [pc, #224]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 80011fe:	430a      	orrs	r2, r1
 8001200:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001202:	4b37      	ldr	r3, [pc, #220]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4a3a      	ldr	r2, [pc, #232]	@ (80012f0 <HAL_RCC_OscConfig+0x630>)
 8001208:	4013      	ands	r3, r2
 800120a:	0019      	movs	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001214:	431a      	orrs	r2, r3
 8001216:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001218:	430a      	orrs	r2, r1
 800121a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800121c:	4b30      	ldr	r3, [pc, #192]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b2f      	ldr	r3, [pc, #188]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001222:	2180      	movs	r1, #128	@ 0x80
 8001224:	0449      	lsls	r1, r1, #17
 8001226:	430a      	orrs	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fae9 	bl	8000800 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001234:	f7ff fae4 	bl	8000800 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e047      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001246:	4b26      	ldr	r3, [pc, #152]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2380      	movs	r3, #128	@ 0x80
 800124c:	049b      	lsls	r3, r3, #18
 800124e:	4013      	ands	r3, r2
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x574>
 8001252:	e03f      	b.n	80012d4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001254:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800125a:	4924      	ldr	r1, [pc, #144]	@ (80012ec <HAL_RCC_OscConfig+0x62c>)
 800125c:	400a      	ands	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff face 	bl	8000800 <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126a:	f7ff fac9 	bl	8000800 <HAL_GetTick>
 800126e:	0002      	movs	r2, r0
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e02c      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127c:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	@ 0x80
 8001282:	049b      	lsls	r3, r3, #18
 8001284:	4013      	ands	r3, r2
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x5aa>
 8001288:	e024      	b.n	80012d4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e01f      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800129c:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <HAL_RCC_OscConfig+0x620>)
 800129e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	2380      	movs	r3, #128	@ 0x80
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	401a      	ands	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d10e      	bne.n	80012d0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	220f      	movs	r2, #15
 80012b6:	401a      	ands	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012bc:	429a      	cmp	r2, r3
 80012be:	d107      	bne.n	80012d0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	23f0      	movs	r3, #240	@ 0xf0
 80012c4:	039b      	lsls	r3, r3, #14
 80012c6:	401a      	ands	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b008      	add	sp, #32
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	40021000 	.word	0x40021000
 80012e4:	00001388 	.word	0x00001388
 80012e8:	efffffff 	.word	0xefffffff
 80012ec:	feffffff 	.word	0xfeffffff
 80012f0:	ffc2ffff 	.word	0xffc2ffff

080012f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e0b3      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001308:	4b5b      	ldr	r3, [pc, #364]	@ (8001478 <HAL_RCC_ClockConfig+0x184>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2201      	movs	r2, #1
 800130e:	4013      	ands	r3, r2
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d911      	bls.n	800133a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b58      	ldr	r3, [pc, #352]	@ (8001478 <HAL_RCC_ClockConfig+0x184>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2201      	movs	r2, #1
 800131c:	4393      	bics	r3, r2
 800131e:	0019      	movs	r1, r3
 8001320:	4b55      	ldr	r3, [pc, #340]	@ (8001478 <HAL_RCC_ClockConfig+0x184>)
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001328:	4b53      	ldr	r3, [pc, #332]	@ (8001478 <HAL_RCC_ClockConfig+0x184>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2201      	movs	r2, #1
 800132e:	4013      	ands	r3, r2
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d001      	beq.n	800133a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e09a      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2202      	movs	r2, #2
 8001340:	4013      	ands	r3, r2
 8001342:	d015      	beq.n	8001370 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2204      	movs	r2, #4
 800134a:	4013      	ands	r3, r2
 800134c:	d006      	beq.n	800135c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800134e:	4b4b      	ldr	r3, [pc, #300]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4b4a      	ldr	r3, [pc, #296]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 8001354:	21e0      	movs	r1, #224	@ 0xe0
 8001356:	00c9      	lsls	r1, r1, #3
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800135c:	4b47      	ldr	r3, [pc, #284]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	22f0      	movs	r2, #240	@ 0xf0
 8001362:	4393      	bics	r3, r2
 8001364:	0019      	movs	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	4b44      	ldr	r3, [pc, #272]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 800136c:	430a      	orrs	r2, r1
 800136e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2201      	movs	r2, #1
 8001376:	4013      	ands	r3, r2
 8001378:	d040      	beq.n	80013fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d107      	bne.n	8001392 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	4b3e      	ldr	r3, [pc, #248]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	2380      	movs	r3, #128	@ 0x80
 8001388:	029b      	lsls	r3, r3, #10
 800138a:	4013      	ands	r3, r2
 800138c:	d114      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e06e      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d107      	bne.n	80013aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139a:	4b38      	ldr	r3, [pc, #224]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2380      	movs	r3, #128	@ 0x80
 80013a0:	049b      	lsls	r3, r3, #18
 80013a2:	4013      	ands	r3, r2
 80013a4:	d108      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e062      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013aa:	4b34      	ldr	r3, [pc, #208]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2202      	movs	r2, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e05b      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b8:	4b30      	ldr	r3, [pc, #192]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	4393      	bics	r3, r2
 80013c0:	0019      	movs	r1, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 80013c8:	430a      	orrs	r2, r1
 80013ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013cc:	f7ff fa18 	bl	8000800 <HAL_GetTick>
 80013d0:	0003      	movs	r3, r0
 80013d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d4:	e009      	b.n	80013ea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d6:	f7ff fa13 	bl	8000800 <HAL_GetTick>
 80013da:	0002      	movs	r2, r0
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	4a27      	ldr	r2, [pc, #156]	@ (8001480 <HAL_RCC_ClockConfig+0x18c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e042      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ea:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	220c      	movs	r2, #12
 80013f0:	401a      	ands	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d1ec      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <HAL_RCC_ClockConfig+0x184>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2201      	movs	r2, #1
 8001402:	4013      	ands	r3, r2
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d211      	bcs.n	800142e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <HAL_RCC_ClockConfig+0x184>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	4393      	bics	r3, r2
 8001412:	0019      	movs	r1, r3
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <HAL_RCC_ClockConfig+0x184>)
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <HAL_RCC_ClockConfig+0x184>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2201      	movs	r2, #1
 8001422:	4013      	ands	r3, r2
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d001      	beq.n	800142e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e020      	b.n	8001470 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2204      	movs	r2, #4
 8001434:	4013      	ands	r3, r2
 8001436:	d009      	beq.n	800144c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001438:	4b10      	ldr	r3, [pc, #64]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a11      	ldr	r2, [pc, #68]	@ (8001484 <HAL_RCC_ClockConfig+0x190>)
 800143e:	4013      	ands	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800144c:	f000 f820 	bl	8001490 <HAL_RCC_GetSysClockFreq>
 8001450:	0001      	movs	r1, r0
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_RCC_ClockConfig+0x188>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	220f      	movs	r2, #15
 800145a:	4013      	ands	r3, r2
 800145c:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <HAL_RCC_ClockConfig+0x194>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	000a      	movs	r2, r1
 8001462:	40da      	lsrs	r2, r3
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_RCC_ClockConfig+0x198>)
 8001466:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001468:	2003      	movs	r0, #3
 800146a:	f7ff f8d9 	bl	8000620 <HAL_InitTick>
  
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	0018      	movs	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	b004      	add	sp, #16
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40022000 	.word	0x40022000
 800147c:	40021000 	.word	0x40021000
 8001480:	00001388 	.word	0x00001388
 8001484:	fffff8ff 	.word	0xfffff8ff
 8001488:	08003618 	.word	0x08003618
 800148c:	20000000 	.word	0x20000000

08001490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80014aa:	4b20      	ldr	r3, [pc, #128]	@ (800152c <HAL_RCC_GetSysClockFreq+0x9c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	220c      	movs	r2, #12
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d002      	beq.n	80014c0 <HAL_RCC_GetSysClockFreq+0x30>
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d003      	beq.n	80014c6 <HAL_RCC_GetSysClockFreq+0x36>
 80014be:	e02c      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014c2:	613b      	str	r3, [r7, #16]
      break;
 80014c4:	e02c      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	0c9b      	lsrs	r3, r3, #18
 80014ca:	220f      	movs	r2, #15
 80014cc:	4013      	ands	r3, r2
 80014ce:	4a19      	ldr	r2, [pc, #100]	@ (8001534 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_RCC_GetSysClockFreq+0x9c>)
 80014d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d8:	220f      	movs	r2, #15
 80014da:	4013      	ands	r3, r2
 80014dc:	4a16      	ldr	r2, [pc, #88]	@ (8001538 <HAL_RCC_GetSysClockFreq+0xa8>)
 80014de:	5cd3      	ldrb	r3, [r2, r3]
 80014e0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	025b      	lsls	r3, r3, #9
 80014e8:	4013      	ands	r3, r2
 80014ea:	d009      	beq.n	8001500 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	4810      	ldr	r0, [pc, #64]	@ (8001530 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014f0:	f7fe fe0a 	bl	8000108 <__udivsi3>
 80014f4:	0003      	movs	r3, r0
 80014f6:	001a      	movs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4353      	muls	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e009      	b.n	8001514 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	000a      	movs	r2, r1
 8001504:	0152      	lsls	r2, r2, #5
 8001506:	1a52      	subs	r2, r2, r1
 8001508:	0193      	lsls	r3, r2, #6
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	185b      	adds	r3, r3, r1
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	613b      	str	r3, [r7, #16]
      break;
 8001518:	e002      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800151a:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <HAL_RCC_GetSysClockFreq+0xa0>)
 800151c:	613b      	str	r3, [r7, #16]
      break;
 800151e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001520:	693b      	ldr	r3, [r7, #16]
}
 8001522:	0018      	movs	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	b006      	add	sp, #24
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			@ (mov r8, r8)
 800152c:	40021000 	.word	0x40021000
 8001530:	007a1200 	.word	0x007a1200
 8001534:	08003630 	.word	0x08003630
 8001538:	08003640 	.word	0x08003640

0800153c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001540:	4b02      	ldr	r3, [pc, #8]	@ (800154c <HAL_RCC_GetHCLKFreq+0x10>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	20000000 	.word	0x20000000

08001550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001554:	f7ff fff2 	bl	800153c <HAL_RCC_GetHCLKFreq>
 8001558:	0001      	movs	r1, r0
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	2207      	movs	r2, #7
 8001562:	4013      	ands	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	40d9      	lsrs	r1, r3
 800156a:	000b      	movs	r3, r1
}    
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	40021000 	.word	0x40021000
 8001578:	08003628 	.word	0x08003628

0800157c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_RCC_GetClockConfig+0x4c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2203      	movs	r2, #3
 8001592:	401a      	ands	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_RCC_GetClockConfig+0x4c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	22f0      	movs	r2, #240	@ 0xf0
 800159e:	401a      	ands	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_RCC_GetClockConfig+0x4c>)
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	23e0      	movs	r3, #224	@ 0xe0
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	401a      	ands	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_RCC_GetClockConfig+0x50>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	401a      	ands	r2, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	601a      	str	r2, [r3, #0]
}
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b002      	add	sp, #8
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			@ (mov r8, r8)
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40022000 	.word	0x40022000

080015d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e042      	b.n	8001668 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	223d      	movs	r2, #61	@ 0x3d
 80015e6:	5c9b      	ldrb	r3, [r3, r2]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d107      	bne.n	80015fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	223c      	movs	r2, #60	@ 0x3c
 80015f2:	2100      	movs	r1, #0
 80015f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	0018      	movs	r0, r3
 80015fa:	f000 f839 	bl	8001670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	223d      	movs	r2, #61	@ 0x3d
 8001602:	2102      	movs	r1, #2
 8001604:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3304      	adds	r3, #4
 800160e:	0019      	movs	r1, r3
 8001610:	0010      	movs	r0, r2
 8001612:	f000 f98f 	bl	8001934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2246      	movs	r2, #70	@ 0x46
 800161a:	2101      	movs	r1, #1
 800161c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	223e      	movs	r2, #62	@ 0x3e
 8001622:	2101      	movs	r1, #1
 8001624:	5499      	strb	r1, [r3, r2]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	223f      	movs	r2, #63	@ 0x3f
 800162a:	2101      	movs	r1, #1
 800162c:	5499      	strb	r1, [r3, r2]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2240      	movs	r2, #64	@ 0x40
 8001632:	2101      	movs	r1, #1
 8001634:	5499      	strb	r1, [r3, r2]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2241      	movs	r2, #65	@ 0x41
 800163a:	2101      	movs	r1, #1
 800163c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2242      	movs	r2, #66	@ 0x42
 8001642:	2101      	movs	r1, #1
 8001644:	5499      	strb	r1, [r3, r2]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2243      	movs	r2, #67	@ 0x43
 800164a:	2101      	movs	r1, #1
 800164c:	5499      	strb	r1, [r3, r2]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2244      	movs	r2, #68	@ 0x44
 8001652:	2101      	movs	r1, #1
 8001654:	5499      	strb	r1, [r3, r2]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2245      	movs	r2, #69	@ 0x45
 800165a:	2101      	movs	r1, #1
 800165c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	223d      	movs	r2, #61	@ 0x3d
 8001662:	2101      	movs	r1, #1
 8001664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001678:	46c0      	nop			@ (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	223d      	movs	r2, #61	@ 0x3d
 800168c:	5c9b      	ldrb	r3, [r3, r2]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d001      	beq.n	8001698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e035      	b.n	8001704 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	223d      	movs	r2, #61	@ 0x3d
 800169c:	2102      	movs	r1, #2
 800169e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2101      	movs	r1, #1
 80016ac:	430a      	orrs	r2, r1
 80016ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a15      	ldr	r2, [pc, #84]	@ (800170c <HAL_TIM_Base_Start_IT+0x8c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d009      	beq.n	80016ce <HAL_TIM_Base_Start_IT+0x4e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <HAL_TIM_Base_Start_IT+0x90>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d004      	beq.n	80016ce <HAL_TIM_Base_Start_IT+0x4e>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <HAL_TIM_Base_Start_IT+0x94>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d111      	bne.n	80016f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2207      	movs	r2, #7
 80016d6:	4013      	ands	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b06      	cmp	r3, #6
 80016de:	d010      	beq.n	8001702 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2101      	movs	r1, #1
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016f0:	e007      	b.n	8001702 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40012c00 	.word	0x40012c00
 8001710:	40000400 	.word	0x40000400
 8001714:	40014000 	.word	0x40014000

08001718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2202      	movs	r2, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d021      	beq.n	800177c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d01d      	beq.n	800177c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2203      	movs	r2, #3
 8001746:	4252      	negs	r2, r2
 8001748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2203      	movs	r2, #3
 8001758:	4013      	ands	r3, r2
 800175a:	d004      	beq.n	8001766 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0018      	movs	r0, r3
 8001760:	f000 f8d0 	bl	8001904 <HAL_TIM_IC_CaptureCallback>
 8001764:	e007      	b.n	8001776 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	0018      	movs	r0, r3
 800176a:	f000 f8c3 	bl	80018f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	0018      	movs	r0, r3
 8001772:	f000 f8cf 	bl	8001914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2204      	movs	r2, #4
 8001780:	4013      	ands	r3, r2
 8001782:	d022      	beq.n	80017ca <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2204      	movs	r2, #4
 8001788:	4013      	ands	r3, r2
 800178a:	d01e      	beq.n	80017ca <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2205      	movs	r2, #5
 8001792:	4252      	negs	r2, r2
 8001794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2202      	movs	r2, #2
 800179a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	699a      	ldr	r2, [r3, #24]
 80017a2:	23c0      	movs	r3, #192	@ 0xc0
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4013      	ands	r3, r2
 80017a8:	d004      	beq.n	80017b4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	0018      	movs	r0, r3
 80017ae:	f000 f8a9 	bl	8001904 <HAL_TIM_IC_CaptureCallback>
 80017b2:	e007      	b.n	80017c4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	0018      	movs	r0, r3
 80017b8:	f000 f89c 	bl	80018f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	0018      	movs	r0, r3
 80017c0:	f000 f8a8 	bl	8001914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2208      	movs	r2, #8
 80017ce:	4013      	ands	r3, r2
 80017d0:	d021      	beq.n	8001816 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2208      	movs	r2, #8
 80017d6:	4013      	ands	r3, r2
 80017d8:	d01d      	beq.n	8001816 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2209      	movs	r2, #9
 80017e0:	4252      	negs	r2, r2
 80017e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2204      	movs	r2, #4
 80017e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2203      	movs	r2, #3
 80017f2:	4013      	ands	r3, r2
 80017f4:	d004      	beq.n	8001800 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f000 f883 	bl	8001904 <HAL_TIM_IC_CaptureCallback>
 80017fe:	e007      	b.n	8001810 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	0018      	movs	r0, r3
 8001804:	f000 f876 	bl	80018f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	0018      	movs	r0, r3
 800180c:	f000 f882 	bl	8001914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2210      	movs	r2, #16
 800181a:	4013      	ands	r3, r2
 800181c:	d022      	beq.n	8001864 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2210      	movs	r2, #16
 8001822:	4013      	ands	r3, r2
 8001824:	d01e      	beq.n	8001864 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2211      	movs	r2, #17
 800182c:	4252      	negs	r2, r2
 800182e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2208      	movs	r2, #8
 8001834:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	69da      	ldr	r2, [r3, #28]
 800183c:	23c0      	movs	r3, #192	@ 0xc0
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4013      	ands	r3, r2
 8001842:	d004      	beq.n	800184e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	0018      	movs	r0, r3
 8001848:	f000 f85c 	bl	8001904 <HAL_TIM_IC_CaptureCallback>
 800184c:	e007      	b.n	800185e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	0018      	movs	r0, r3
 8001852:	f000 f84f 	bl	80018f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0018      	movs	r0, r3
 800185a:	f000 f85b 	bl	8001914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2201      	movs	r2, #1
 8001868:	4013      	ands	r3, r2
 800186a:	d00c      	beq.n	8001886 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	d008      	beq.n	8001886 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2202      	movs	r2, #2
 800187a:	4252      	negs	r2, r2
 800187c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0018      	movs	r0, r3
 8001882:	f7fe fe3f 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2280      	movs	r2, #128	@ 0x80
 800188a:	4013      	ands	r3, r2
 800188c:	d00c      	beq.n	80018a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2280      	movs	r2, #128	@ 0x80
 8001892:	4013      	ands	r3, r2
 8001894:	d008      	beq.n	80018a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2281      	movs	r2, #129	@ 0x81
 800189c:	4252      	negs	r2, r2
 800189e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	0018      	movs	r0, r3
 80018a4:	f000 f8d2 	bl	8001a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2240      	movs	r2, #64	@ 0x40
 80018ac:	4013      	ands	r3, r2
 80018ae:	d00c      	beq.n	80018ca <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2240      	movs	r2, #64	@ 0x40
 80018b4:	4013      	ands	r3, r2
 80018b6:	d008      	beq.n	80018ca <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2241      	movs	r2, #65	@ 0x41
 80018be:	4252      	negs	r2, r2
 80018c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f000 f82d 	bl	8001924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2220      	movs	r2, #32
 80018ce:	4013      	ands	r3, r2
 80018d0:	d00c      	beq.n	80018ec <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2220      	movs	r2, #32
 80018d6:	4013      	ands	r3, r2
 80018d8:	d008      	beq.n	80018ec <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2221      	movs	r2, #33	@ 0x21
 80018e0:	4252      	negs	r2, r2
 80018e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	0018      	movs	r0, r3
 80018e8:	f000 f8a8 	bl	8001a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018ec:	46c0      	nop			@ (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b004      	add	sp, #16
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018fc:	46c0      	nop			@ (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800190c:	46c0      	nop			@ (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800191c:	46c0      	nop			@ (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800192c:	46c0      	nop			@ (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b002      	add	sp, #8
 8001932:	bd80      	pop	{r7, pc}

08001934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a36      	ldr	r2, [pc, #216]	@ (8001a20 <TIM_Base_SetConfig+0xec>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d003      	beq.n	8001954 <TIM_Base_SetConfig+0x20>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a35      	ldr	r2, [pc, #212]	@ (8001a24 <TIM_Base_SetConfig+0xf0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d108      	bne.n	8001966 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2270      	movs	r2, #112	@ 0x70
 8001958:	4393      	bics	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4313      	orrs	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a2d      	ldr	r2, [pc, #180]	@ (8001a20 <TIM_Base_SetConfig+0xec>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <TIM_Base_SetConfig+0x62>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a2c      	ldr	r2, [pc, #176]	@ (8001a24 <TIM_Base_SetConfig+0xf0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00f      	beq.n	8001996 <TIM_Base_SetConfig+0x62>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a2b      	ldr	r2, [pc, #172]	@ (8001a28 <TIM_Base_SetConfig+0xf4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00b      	beq.n	8001996 <TIM_Base_SetConfig+0x62>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a2a      	ldr	r2, [pc, #168]	@ (8001a2c <TIM_Base_SetConfig+0xf8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <TIM_Base_SetConfig+0x62>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a29      	ldr	r2, [pc, #164]	@ (8001a30 <TIM_Base_SetConfig+0xfc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d003      	beq.n	8001996 <TIM_Base_SetConfig+0x62>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a28      	ldr	r2, [pc, #160]	@ (8001a34 <TIM_Base_SetConfig+0x100>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d108      	bne.n	80019a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4a27      	ldr	r2, [pc, #156]	@ (8001a38 <TIM_Base_SetConfig+0x104>)
 800199a:	4013      	ands	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2280      	movs	r2, #128	@ 0x80
 80019ac:	4393      	bics	r3, r2
 80019ae:	001a      	movs	r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a13      	ldr	r2, [pc, #76]	@ (8001a20 <TIM_Base_SetConfig+0xec>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00b      	beq.n	80019ee <TIM_Base_SetConfig+0xba>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <TIM_Base_SetConfig+0xf8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d007      	beq.n	80019ee <TIM_Base_SetConfig+0xba>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a13      	ldr	r2, [pc, #76]	@ (8001a30 <TIM_Base_SetConfig+0xfc>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d003      	beq.n	80019ee <TIM_Base_SetConfig+0xba>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <TIM_Base_SetConfig+0x100>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d103      	bne.n	80019f6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d106      	bne.n	8001a16 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4393      	bics	r3, r2
 8001a10:	001a      	movs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	611a      	str	r2, [r3, #16]
  }
}
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b004      	add	sp, #16
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	40012c00 	.word	0x40012c00
 8001a24:	40000400 	.word	0x40000400
 8001a28:	40002000 	.word	0x40002000
 8001a2c:	40014000 	.word	0x40014000
 8001a30:	40014400 	.word	0x40014400
 8001a34:	40014800 	.word	0x40014800
 8001a38:	fffffcff 	.word	0xfffffcff

08001a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a44:	46c0      	nop			@ (mov r8, r8)
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b002      	add	sp, #8
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a54:	46c0      	nop			@ (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e044      	b.n	8001af8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d107      	bne.n	8001a86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2278      	movs	r2, #120	@ 0x78
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7fe fd81 	bl	8000588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2224      	movs	r2, #36	@ 0x24
 8001a8a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2101      	movs	r1, #1
 8001a98:	438a      	bics	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 f96c 	bl	8001d84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f000 f828 	bl	8001b04 <UART_SetConfig>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e01c      	b.n	8001af8 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	490d      	ldr	r1, [pc, #52]	@ (8001b00 <HAL_UART_Init+0xa4>)
 8001aca:	400a      	ands	r2, r1
 8001acc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2108      	movs	r1, #8
 8001ada:	438a      	bics	r2, r1
 8001adc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 f9fb 	bl	8001eec <UART_CheckIdleState>
 8001af6:	0003      	movs	r3, r0
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b002      	add	sp, #8
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	fffff7ff 	.word	0xfffff7ff

08001b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b0c:	231e      	movs	r3, #30
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a8d      	ldr	r2, [pc, #564]	@ (8001d68 <UART_SetConfig+0x264>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	0019      	movs	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a88      	ldr	r2, [pc, #544]	@ (8001d6c <UART_SetConfig+0x268>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a7f      	ldr	r2, [pc, #508]	@ (8001d70 <UART_SetConfig+0x26c>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a7b      	ldr	r2, [pc, #492]	@ (8001d74 <UART_SetConfig+0x270>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d127      	bne.n	8001bda <UART_SetConfig+0xd6>
 8001b8a:	4b7b      	ldr	r3, [pc, #492]	@ (8001d78 <UART_SetConfig+0x274>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	2203      	movs	r2, #3
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d00d      	beq.n	8001bb2 <UART_SetConfig+0xae>
 8001b96:	d81b      	bhi.n	8001bd0 <UART_SetConfig+0xcc>
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d014      	beq.n	8001bc6 <UART_SetConfig+0xc2>
 8001b9c:	d818      	bhi.n	8001bd0 <UART_SetConfig+0xcc>
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <UART_SetConfig+0xa4>
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d00a      	beq.n	8001bbc <UART_SetConfig+0xb8>
 8001ba6:	e013      	b.n	8001bd0 <UART_SetConfig+0xcc>
 8001ba8:	231f      	movs	r3, #31
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	e021      	b.n	8001bf6 <UART_SetConfig+0xf2>
 8001bb2:	231f      	movs	r3, #31
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	e01c      	b.n	8001bf6 <UART_SetConfig+0xf2>
 8001bbc:	231f      	movs	r3, #31
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	e017      	b.n	8001bf6 <UART_SetConfig+0xf2>
 8001bc6:	231f      	movs	r3, #31
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	2208      	movs	r2, #8
 8001bcc:	701a      	strb	r2, [r3, #0]
 8001bce:	e012      	b.n	8001bf6 <UART_SetConfig+0xf2>
 8001bd0:	231f      	movs	r3, #31
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	e00d      	b.n	8001bf6 <UART_SetConfig+0xf2>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a67      	ldr	r2, [pc, #412]	@ (8001d7c <UART_SetConfig+0x278>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d104      	bne.n	8001bee <UART_SetConfig+0xea>
 8001be4:	231f      	movs	r3, #31
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	e003      	b.n	8001bf6 <UART_SetConfig+0xf2>
 8001bee:	231f      	movs	r3, #31
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69da      	ldr	r2, [r3, #28]
 8001bfa:	2380      	movs	r3, #128	@ 0x80
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d15c      	bne.n	8001cbc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8001c02:	231f      	movs	r3, #31
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d015      	beq.n	8001c38 <UART_SetConfig+0x134>
 8001c0c:	dc18      	bgt.n	8001c40 <UART_SetConfig+0x13c>
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d00d      	beq.n	8001c2e <UART_SetConfig+0x12a>
 8001c12:	dc15      	bgt.n	8001c40 <UART_SetConfig+0x13c>
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <UART_SetConfig+0x11a>
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d005      	beq.n	8001c28 <UART_SetConfig+0x124>
 8001c1c:	e010      	b.n	8001c40 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c1e:	f7ff fc97 	bl	8001550 <HAL_RCC_GetPCLK1Freq>
 8001c22:	0003      	movs	r3, r0
 8001c24:	61bb      	str	r3, [r7, #24]
        break;
 8001c26:	e012      	b.n	8001c4e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001c28:	4b55      	ldr	r3, [pc, #340]	@ (8001d80 <UART_SetConfig+0x27c>)
 8001c2a:	61bb      	str	r3, [r7, #24]
        break;
 8001c2c:	e00f      	b.n	8001c4e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001c2e:	f7ff fc2f 	bl	8001490 <HAL_RCC_GetSysClockFreq>
 8001c32:	0003      	movs	r3, r0
 8001c34:	61bb      	str	r3, [r7, #24]
        break;
 8001c36:	e00a      	b.n	8001c4e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	61bb      	str	r3, [r7, #24]
        break;
 8001c3e:	e006      	b.n	8001c4e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001c44:	231e      	movs	r3, #30
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
        break;
 8001c4c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d100      	bne.n	8001c56 <UART_SetConfig+0x152>
 8001c54:	e07a      	b.n	8001d4c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	005a      	lsls	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	085b      	lsrs	r3, r3, #1
 8001c60:	18d2      	adds	r2, r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0019      	movs	r1, r3
 8001c68:	0010      	movs	r0, r2
 8001c6a:	f7fe fa4d 	bl	8000108 <__udivsi3>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d91c      	bls.n	8001cb2 <UART_SetConfig+0x1ae>
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	2380      	movs	r3, #128	@ 0x80
 8001c7c:	025b      	lsls	r3, r3, #9
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d217      	bcs.n	8001cb2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	200e      	movs	r0, #14
 8001c88:	183b      	adds	r3, r7, r0
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	438a      	bics	r2, r1
 8001c8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2207      	movs	r2, #7
 8001c98:	4013      	ands	r3, r2
 8001c9a:	b299      	uxth	r1, r3
 8001c9c:	183b      	adds	r3, r7, r0
 8001c9e:	183a      	adds	r2, r7, r0
 8001ca0:	8812      	ldrh	r2, [r2, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	183a      	adds	r2, r7, r0
 8001cac:	8812      	ldrh	r2, [r2, #0]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	e04c      	b.n	8001d4c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001cb2:	231e      	movs	r3, #30
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e047      	b.n	8001d4c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001cbc:	231f      	movs	r3, #31
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d015      	beq.n	8001cf2 <UART_SetConfig+0x1ee>
 8001cc6:	dc18      	bgt.n	8001cfa <UART_SetConfig+0x1f6>
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d00d      	beq.n	8001ce8 <UART_SetConfig+0x1e4>
 8001ccc:	dc15      	bgt.n	8001cfa <UART_SetConfig+0x1f6>
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <UART_SetConfig+0x1d4>
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d005      	beq.n	8001ce2 <UART_SetConfig+0x1de>
 8001cd6:	e010      	b.n	8001cfa <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001cd8:	f7ff fc3a 	bl	8001550 <HAL_RCC_GetPCLK1Freq>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	61bb      	str	r3, [r7, #24]
        break;
 8001ce0:	e012      	b.n	8001d08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ce2:	4b27      	ldr	r3, [pc, #156]	@ (8001d80 <UART_SetConfig+0x27c>)
 8001ce4:	61bb      	str	r3, [r7, #24]
        break;
 8001ce6:	e00f      	b.n	8001d08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ce8:	f7ff fbd2 	bl	8001490 <HAL_RCC_GetSysClockFreq>
 8001cec:	0003      	movs	r3, r0
 8001cee:	61bb      	str	r3, [r7, #24]
        break;
 8001cf0:	e00a      	b.n	8001d08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	61bb      	str	r3, [r7, #24]
        break;
 8001cf8:	e006      	b.n	8001d08 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001cfe:	231e      	movs	r3, #30
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
        break;
 8001d06:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01e      	beq.n	8001d4c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	085a      	lsrs	r2, r3, #1
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	18d2      	adds	r2, r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	0019      	movs	r1, r3
 8001d1e:	0010      	movs	r0, r2
 8001d20:	f7fe f9f2 	bl	8000108 <__udivsi3>
 8001d24:	0003      	movs	r3, r0
 8001d26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	d90a      	bls.n	8001d44 <UART_SetConfig+0x240>
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	2380      	movs	r3, #128	@ 0x80
 8001d32:	025b      	lsls	r3, r3, #9
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d205      	bcs.n	8001d44 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	e003      	b.n	8001d4c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001d44:	231e      	movs	r3, #30
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001d58:	231e      	movs	r3, #30
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b008      	add	sp, #32
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	ffff69f3 	.word	0xffff69f3
 8001d6c:	ffffcfff 	.word	0xffffcfff
 8001d70:	fffff4ff 	.word	0xfffff4ff
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40004400 	.word	0x40004400
 8001d80:	007a1200 	.word	0x007a1200

08001d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d90:	2208      	movs	r2, #8
 8001d92:	4013      	ands	r3, r2
 8001d94:	d00b      	beq.n	8001dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ec8 <UART_AdvFeatureConfig+0x144>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	0019      	movs	r1, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	2201      	movs	r2, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d00b      	beq.n	8001dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4a43      	ldr	r2, [pc, #268]	@ (8001ecc <UART_AdvFeatureConfig+0x148>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d00b      	beq.n	8001df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ed0 <UART_AdvFeatureConfig+0x14c>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	0019      	movs	r1, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	2204      	movs	r2, #4
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d00b      	beq.n	8001e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4a34      	ldr	r2, [pc, #208]	@ (8001ed4 <UART_AdvFeatureConfig+0x150>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	2210      	movs	r2, #16
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d00b      	beq.n	8001e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a2c      	ldr	r2, [pc, #176]	@ (8001ed8 <UART_AdvFeatureConfig+0x154>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d00b      	beq.n	8001e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4a25      	ldr	r2, [pc, #148]	@ (8001edc <UART_AdvFeatureConfig+0x158>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	2240      	movs	r2, #64	@ 0x40
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d01d      	beq.n	8001e9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee0 <UART_AdvFeatureConfig+0x15c>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e7e:	2380      	movs	r3, #128	@ 0x80
 8001e80:	035b      	lsls	r3, r3, #13
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d10b      	bne.n	8001e9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a15      	ldr	r2, [pc, #84]	@ (8001ee4 <UART_AdvFeatureConfig+0x160>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea2:	2280      	movs	r2, #128	@ 0x80
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d00b      	beq.n	8001ec0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee8 <UART_AdvFeatureConfig+0x164>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	605a      	str	r2, [r3, #4]
  }
}
 8001ec0:	46c0      	nop			@ (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	ffff7fff 	.word	0xffff7fff
 8001ecc:	fffdffff 	.word	0xfffdffff
 8001ed0:	fffeffff 	.word	0xfffeffff
 8001ed4:	fffbffff 	.word	0xfffbffff
 8001ed8:	ffffefff 	.word	0xffffefff
 8001edc:	ffffdfff 	.word	0xffffdfff
 8001ee0:	ffefffff 	.word	0xffefffff
 8001ee4:	ff9fffff 	.word	0xff9fffff
 8001ee8:	fff7ffff 	.word	0xfff7ffff

08001eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b092      	sub	sp, #72	@ 0x48
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2284      	movs	r2, #132	@ 0x84
 8001ef8:	2100      	movs	r1, #0
 8001efa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001efc:	f7fe fc80 	bl	8000800 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2208      	movs	r2, #8
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d12c      	bne.n	8001f6c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f14:	2280      	movs	r2, #128	@ 0x80
 8001f16:	0391      	lsls	r1, r2, #14
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4a46      	ldr	r2, [pc, #280]	@ (8002034 <UART_CheckIdleState+0x148>)
 8001f1c:	9200      	str	r2, [sp, #0]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f000 f88c 	bl	800203c <UART_WaitOnFlagUntilTimeout>
 8001f24:	1e03      	subs	r3, r0, #0
 8001f26:	d021      	beq.n	8001f6c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f28:	f3ef 8310 	mrs	r3, PRIMASK
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001f30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f32:	2301      	movs	r3, #1
 8001f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f38:	f383 8810 	msr	PRIMASK, r3
}
 8001f3c:	46c0      	nop			@ (mov r8, r8)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2180      	movs	r1, #128	@ 0x80
 8001f4a:	438a      	bics	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f54:	f383 8810 	msr	PRIMASK, r3
}
 8001f58:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2278      	movs	r2, #120	@ 0x78
 8001f64:	2100      	movs	r1, #0
 8001f66:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e05f      	b.n	800202c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2204      	movs	r2, #4
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d146      	bne.n	8002008 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	03d1      	lsls	r1, r2, #15
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	4a2c      	ldr	r2, [pc, #176]	@ (8002034 <UART_CheckIdleState+0x148>)
 8001f84:	9200      	str	r2, [sp, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f000 f858 	bl	800203c <UART_WaitOnFlagUntilTimeout>
 8001f8c:	1e03      	subs	r3, r0, #0
 8001f8e:	d03b      	beq.n	8002008 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f90:	f3ef 8310 	mrs	r3, PRIMASK
 8001f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f96:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f383 8810 	msr	PRIMASK, r3
}
 8001fa4:	46c0      	nop			@ (mov r8, r8)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4921      	ldr	r1, [pc, #132]	@ (8002038 <UART_CheckIdleState+0x14c>)
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f383 8810 	msr	PRIMASK, r3
}
 8001fc0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8001fc8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fca:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fcc:	2301      	movs	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f383 8810 	msr	PRIMASK, r3
}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	438a      	bics	r2, r1
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f383 8810 	msr	PRIMASK, r3
}
 8001ff2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2280      	movs	r2, #128	@ 0x80
 8001ff8:	2120      	movs	r1, #32
 8001ffa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2278      	movs	r2, #120	@ 0x78
 8002000:	2100      	movs	r1, #0
 8002002:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e011      	b.n	800202c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2280      	movs	r2, #128	@ 0x80
 8002012:	2120      	movs	r1, #32
 8002014:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2278      	movs	r2, #120	@ 0x78
 8002026:	2100      	movs	r1, #0
 8002028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b010      	add	sp, #64	@ 0x40
 8002032:	bd80      	pop	{r7, pc}
 8002034:	01ffffff 	.word	0x01ffffff
 8002038:	fffffedf 	.word	0xfffffedf

0800203c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	1dfb      	adds	r3, r7, #7
 800204a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800204c:	e051      	b.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	3301      	adds	r3, #1
 8002052:	d04e      	beq.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002054:	f7fe fbd4 	bl	8000800 <HAL_GetTick>
 8002058:	0002      	movs	r2, r0
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	429a      	cmp	r2, r3
 8002062:	d302      	bcc.n	800206a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e051      	b.n	8002112 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2204      	movs	r2, #4
 8002076:	4013      	ands	r3, r2
 8002078:	d03b      	beq.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b80      	cmp	r3, #128	@ 0x80
 800207e:	d038      	beq.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b40      	cmp	r3, #64	@ 0x40
 8002084:	d035      	beq.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2208      	movs	r2, #8
 800208e:	4013      	ands	r3, r2
 8002090:	2b08      	cmp	r3, #8
 8002092:	d111      	bne.n	80020b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2208      	movs	r2, #8
 800209a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 f83c 	bl	800211c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2284      	movs	r2, #132	@ 0x84
 80020a8:	2108      	movs	r1, #8
 80020aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2278      	movs	r2, #120	@ 0x78
 80020b0:	2100      	movs	r1, #0
 80020b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e02c      	b.n	8002112 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	2380      	movs	r3, #128	@ 0x80
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	401a      	ands	r2, r3
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d112      	bne.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2280      	movs	r2, #128	@ 0x80
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 f81f 	bl	800211c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2284      	movs	r2, #132	@ 0x84
 80020e2:	2120      	movs	r1, #32
 80020e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2278      	movs	r2, #120	@ 0x78
 80020ea:	2100      	movs	r1, #0
 80020ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e00f      	b.n	8002112 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	4013      	ands	r3, r2
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	425a      	negs	r2, r3
 8002102:	4153      	adcs	r3, r2
 8002104:	b2db      	uxtb	r3, r3
 8002106:	001a      	movs	r2, r3
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d09e      	beq.n	800204e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	0018      	movs	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	b004      	add	sp, #16
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	@ 0x38
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002124:	f3ef 8310 	mrs	r3, PRIMASK
 8002128:	617b      	str	r3, [r7, #20]
  return(result);
 800212a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800212c:	637b      	str	r3, [r7, #52]	@ 0x34
 800212e:	2301      	movs	r3, #1
 8002130:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f383 8810 	msr	PRIMASK, r3
}
 8002138:	46c0      	nop			@ (mov r8, r8)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4926      	ldr	r1, [pc, #152]	@ (80021e0 <UART_EndRxTransfer+0xc4>)
 8002146:	400a      	ands	r2, r1
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800214c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f383 8810 	msr	PRIMASK, r3
}
 8002154:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002156:	f3ef 8310 	mrs	r3, PRIMASK
 800215a:	623b      	str	r3, [r7, #32]
  return(result);
 800215c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800215e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002160:	2301      	movs	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	f383 8810 	msr	PRIMASK, r3
}
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2101      	movs	r1, #1
 8002178:	438a      	bics	r2, r1
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002182:	f383 8810 	msr	PRIMASK, r3
}
 8002186:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218c:	2b01      	cmp	r3, #1
 800218e:	d118      	bne.n	80021c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002190:	f3ef 8310 	mrs	r3, PRIMASK
 8002194:	60bb      	str	r3, [r7, #8]
  return(result);
 8002196:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800219a:	2301      	movs	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f383 8810 	msr	PRIMASK, r3
}
 80021a4:	46c0      	nop			@ (mov r8, r8)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2110      	movs	r1, #16
 80021b2:	438a      	bics	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f383 8810 	msr	PRIMASK, r3
}
 80021c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2280      	movs	r2, #128	@ 0x80
 80021c6:	2120      	movs	r1, #32
 80021c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	46bd      	mov	sp, r7
 80021da:	b00e      	add	sp, #56	@ 0x38
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	fffffedf 	.word	0xfffffedf

080021e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	0002      	movs	r2, r0
 80021ec:	1dbb      	adds	r3, r7, #6
 80021ee:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80021f4:	1dbb      	adds	r3, r7, #6
 80021f6:	2200      	movs	r2, #0
 80021f8:	5e9b      	ldrsh	r3, [r3, r2]
 80021fa:	2b84      	cmp	r3, #132	@ 0x84
 80021fc:	d006      	beq.n	800220c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80021fe:	1dbb      	adds	r3, r7, #6
 8002200:	2200      	movs	r2, #0
 8002202:	5e9a      	ldrsh	r2, [r3, r2]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	18d3      	adds	r3, r2, r3
 8002208:	3303      	adds	r3, #3
 800220a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800220c:	68fb      	ldr	r3, [r7, #12]
}
 800220e:	0018      	movs	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	b004      	add	sp, #16
 8002214:	bd80      	pop	{r7, pc}

08002216 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800221a:	f000 fabd 	bl	8002798 <vTaskStartScheduler>
  
  return osOK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002228:	b089      	sub	sp, #36	@ 0x24
 800222a:	af04      	add	r7, sp, #16
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <osThreadCreate+0x54>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01c      	beq.n	800227a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685c      	ldr	r4, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691e      	ldr	r6, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2208      	movs	r2, #8
 8002250:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff ffc6 	bl	80021e4 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	9302      	str	r3, [sp, #8]
 8002264:	9201      	str	r2, [sp, #4]
 8002266:	9000      	str	r0, [sp, #0]
 8002268:	000b      	movs	r3, r1
 800226a:	0032      	movs	r2, r6
 800226c:	0029      	movs	r1, r5
 800226e:	0020      	movs	r0, r4
 8002270:	f000 f8e3 	bl	800243a <xTaskCreateStatic>
 8002274:	0003      	movs	r3, r0
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e01d      	b.n	80022b6 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685c      	ldr	r4, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002286:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2208      	movs	r2, #8
 800228c:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800228e:	0018      	movs	r0, r3
 8002290:	f7ff ffa8 	bl	80021e4 <makeFreeRtosPriority>
 8002294:	0001      	movs	r1, r0
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	230c      	movs	r3, #12
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	9100      	str	r1, [sp, #0]
 80022a0:	0013      	movs	r3, r2
 80022a2:	0032      	movs	r2, r6
 80022a4:	0029      	movs	r1, r5
 80022a6:	0020      	movs	r0, r4
 80022a8:	f000 f90d 	bl	80024c6 <xTaskCreate>
 80022ac:	0003      	movs	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d001      	beq.n	80022b6 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b005      	add	sp, #20
 80022be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <osDelay+0x16>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	e000      	b.n	80022d8 <osDelay+0x18>
 80022d6:	2301      	movs	r3, #1
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 fa37 	bl	800274c <vTaskDelay>
  
  return osOK;
 80022de:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b004      	add	sp, #16
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3308      	adds	r3, #8
 80022f4:	001a      	movs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4252      	negs	r2, r2
 8002300:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3308      	adds	r3, #8
 8002306:	001a      	movs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3308      	adds	r3, #8
 8002310:	001a      	movs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800231c:	46c0      	nop			@ (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}

08002324 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}

0800233a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	601a      	str	r2, [r3, #0]
}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	b004      	add	sp, #16
 800237c:	bd80      	pop	{r7, pc}

0800237e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	3301      	adds	r3, #1
 8002392:	d103      	bne.n	800239c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e00c      	b.n	80023b6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3308      	adds	r3, #8
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	e002      	b.n	80023aa <vListInsert+0x2c>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d2f6      	bcs.n	80023a4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	601a      	str	r2, [r3, #0]
}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bd80      	pop	{r7, pc}

080023ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6892      	ldr	r2, [r2, #8]
 8002400:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6852      	ldr	r2, [r2, #4]
 800240a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d103      	bne.n	800241e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	1e5a      	subs	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b004      	add	sp, #16
 8002438:	bd80      	pop	{r7, pc}

0800243a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800243a:	b590      	push	{r4, r7, lr}
 800243c:	b08d      	sub	sp, #52	@ 0x34
 800243e:	af04      	add	r7, sp, #16
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <xTaskCreateStatic+0x1a>
 800244e:	b672      	cpsid	i
 8002450:	46c0      	nop			@ (mov r8, r8)
 8002452:	e7fd      	b.n	8002450 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8002454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <xTaskCreateStatic+0x26>
 800245a:	b672      	cpsid	i
 800245c:	46c0      	nop			@ (mov r8, r8)
 800245e:	e7fd      	b.n	800245c <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002460:	23a0      	movs	r3, #160	@ 0xa0
 8002462:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2ba0      	cmp	r3, #160	@ 0xa0
 8002468:	d002      	beq.n	8002470 <xTaskCreateStatic+0x36>
 800246a:	b672      	cpsid	i
 800246c:	46c0      	nop			@ (mov r8, r8)
 800246e:	e7fd      	b.n	800246c <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002472:	2b00      	cmp	r3, #0
 8002474:	d020      	beq.n	80024b8 <xTaskCreateStatic+0x7e>
 8002476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01d      	beq.n	80024b8 <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800247c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800247e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002484:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	229d      	movs	r2, #157	@ 0x9d
 800248a:	2102      	movs	r1, #2
 800248c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800248e:	683c      	ldr	r4, [r7, #0]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	2300      	movs	r3, #0
 8002498:	9303      	str	r3, [sp, #12]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	9302      	str	r3, [sp, #8]
 800249e:	2318      	movs	r3, #24
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	0023      	movs	r3, r4
 80024aa:	f000 f859 	bl	8002560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f000 f8e7 	bl	8002684 <prvAddNewTaskToReadyList>
 80024b6:	e001      	b.n	80024bc <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80024bc:	69bb      	ldr	r3, [r7, #24]
	}
 80024be:	0018      	movs	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b009      	add	sp, #36	@ 0x24
 80024c4:	bd90      	pop	{r4, r7, pc}

080024c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80024c6:	b590      	push	{r4, r7, lr}
 80024c8:	b08d      	sub	sp, #52	@ 0x34
 80024ca:	af04      	add	r7, sp, #16
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	1dbb      	adds	r3, r7, #6
 80024d4:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024d6:	1dbb      	adds	r3, r7, #6
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	0018      	movs	r0, r3
 80024de:	f000 fdb7 	bl	8003050 <pvPortMalloc>
 80024e2:	0003      	movs	r3, r0
 80024e4:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d010      	beq.n	800250e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80024ec:	20a0      	movs	r0, #160	@ 0xa0
 80024ee:	f000 fdaf 	bl	8003050 <pvPortMalloc>
 80024f2:	0003      	movs	r3, r0
 80024f4:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	631a      	str	r2, [r3, #48]	@ 0x30
 8002502:	e006      	b.n	8002512 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	0018      	movs	r0, r3
 8002508:	f000 fe4a 	bl	80031a0 <vPortFree>
 800250c:	e001      	b.n	8002512 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01a      	beq.n	800254e <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	229d      	movs	r2, #157	@ 0x9d
 800251c:	2100      	movs	r1, #0
 800251e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002520:	1dbb      	adds	r3, r7, #6
 8002522:	881a      	ldrh	r2, [r3, #0]
 8002524:	683c      	ldr	r4, [r7, #0]
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	2300      	movs	r3, #0
 800252c:	9303      	str	r3, [sp, #12]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	0023      	movs	r3, r4
 800253c:	f000 f810 	bl	8002560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	0018      	movs	r0, r3
 8002544:	f000 f89e 	bl	8002684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002548:	2301      	movs	r3, #1
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	e002      	b.n	8002554 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800254e:	2301      	movs	r3, #1
 8002550:	425b      	negs	r3, r3
 8002552:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002554:	69bb      	ldr	r3, [r7, #24]
	}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b009      	add	sp, #36	@ 0x24
 800255c:	bd90      	pop	{r4, r7, pc}
	...

08002560 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800256e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	493f      	ldr	r1, [pc, #252]	@ (8002674 <prvInitialiseNewTask+0x114>)
 8002576:	468c      	mov	ip, r1
 8002578:	4463      	add	r3, ip
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	18d3      	adds	r3, r2, r3
 800257e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2207      	movs	r2, #7
 8002584:	4393      	bics	r3, r2
 8002586:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2207      	movs	r2, #7
 800258c:	4013      	ands	r3, r2
 800258e:	d002      	beq.n	8002596 <prvInitialiseNewTask+0x36>
 8002590:	b672      	cpsid	i
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	e7fd      	b.n	8002592 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e013      	b.n	80025c4 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	18d3      	adds	r3, r2, r3
 80025a2:	7818      	ldrb	r0, [r3, #0]
 80025a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025a6:	2134      	movs	r1, #52	@ 0x34
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	18d3      	adds	r3, r2, r3
 80025ac:	185b      	adds	r3, r3, r1
 80025ae:	1c02      	adds	r2, r0, #0
 80025b0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	18d3      	adds	r3, r2, r3
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b0f      	cmp	r3, #15
 80025c8:	d9e8      	bls.n	800259c <prvInitialiseNewTask+0x3c>
 80025ca:	e000      	b.n	80025ce <prvInitialiseNewTask+0x6e>
		{
			break;
 80025cc:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d0:	2243      	movs	r2, #67	@ 0x43
 80025d2:	2100      	movs	r1, #0
 80025d4:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	2b06      	cmp	r3, #6
 80025da:	d901      	bls.n	80025e0 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025dc:	2306      	movs	r3, #6
 80025de:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80025e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e2:	6a3a      	ldr	r2, [r7, #32]
 80025e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80025e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e8:	6a3a      	ldr	r2, [r7, #32]
 80025ea:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80025ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ee:	2200      	movs	r2, #0
 80025f0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f4:	3304      	adds	r3, #4
 80025f6:	0018      	movs	r0, r3
 80025f8:	f7ff fe94 	bl	8002324 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fe:	3318      	adds	r3, #24
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff fe8f 	bl	8002324 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800260a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	2207      	movs	r2, #7
 8002610:	1ad2      	subs	r2, r2, r3
 8002612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002614:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800261a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800261c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261e:	2298      	movs	r2, #152	@ 0x98
 8002620:	2100      	movs	r1, #0
 8002622:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002626:	229c      	movs	r2, #156	@ 0x9c
 8002628:	2100      	movs	r1, #0
 800262a:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800262c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262e:	334c      	adds	r3, #76	@ 0x4c
 8002630:	224c      	movs	r2, #76	@ 0x4c
 8002632:	2100      	movs	r1, #0
 8002634:	0018      	movs	r0, r3
 8002636:	f000 feb5 	bl	80033a4 <memset>
 800263a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263c:	4a0e      	ldr	r2, [pc, #56]	@ (8002678 <prvInitialiseNewTask+0x118>)
 800263e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002642:	4a0e      	ldr	r2, [pc, #56]	@ (800267c <prvInitialiseNewTask+0x11c>)
 8002644:	655a      	str	r2, [r3, #84]	@ 0x54
 8002646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002648:	4a0d      	ldr	r2, [pc, #52]	@ (8002680 <prvInitialiseNewTask+0x120>)
 800264a:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	68f9      	ldr	r1, [r7, #12]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	0018      	movs	r0, r3
 8002654:	f000 fbc8 	bl	8002de8 <pxPortInitialiseStack>
 8002658:	0002      	movs	r2, r0
 800265a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002668:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b006      	add	sp, #24
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	3fffffff 	.word	0x3fffffff
 8002678:	20001140 	.word	0x20001140
 800267c:	200011a8 	.word	0x200011a8
 8002680:	20001210 	.word	0x20001210

08002684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800268c:	f000 fc48 	bl	8002f20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002690:	4b28      	ldr	r3, [pc, #160]	@ (8002734 <prvAddNewTaskToReadyList+0xb0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	4b27      	ldr	r3, [pc, #156]	@ (8002734 <prvAddNewTaskToReadyList+0xb0>)
 8002698:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800269a:	4b27      	ldr	r3, [pc, #156]	@ (8002738 <prvAddNewTaskToReadyList+0xb4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80026a2:	4b25      	ldr	r3, [pc, #148]	@ (8002738 <prvAddNewTaskToReadyList+0xb4>)
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026a8:	4b22      	ldr	r3, [pc, #136]	@ (8002734 <prvAddNewTaskToReadyList+0xb0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d110      	bne.n	80026d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80026b0:	f000 fa82 	bl	8002bb8 <prvInitialiseTaskLists>
 80026b4:	e00d      	b.n	80026d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80026b6:	4b21      	ldr	r3, [pc, #132]	@ (800273c <prvAddNewTaskToReadyList+0xb8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026be:	4b1e      	ldr	r3, [pc, #120]	@ (8002738 <prvAddNewTaskToReadyList+0xb4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d802      	bhi.n	80026d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80026cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <prvAddNewTaskToReadyList+0xb4>)
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <prvAddNewTaskToReadyList+0xbc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <prvAddNewTaskToReadyList+0xbc>)
 80026da:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e0:	4b18      	ldr	r3, [pc, #96]	@ (8002744 <prvAddNewTaskToReadyList+0xc0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d903      	bls.n	80026f0 <prvAddNewTaskToReadyList+0x6c>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ec:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <prvAddNewTaskToReadyList+0xc0>)
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f4:	0013      	movs	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	189b      	adds	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4a12      	ldr	r2, [pc, #72]	@ (8002748 <prvAddNewTaskToReadyList+0xc4>)
 80026fe:	189a      	adds	r2, r3, r2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	0019      	movs	r1, r3
 8002706:	0010      	movs	r0, r2
 8002708:	f7ff fe17 	bl	800233a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800270c:	f000 fc1a 	bl	8002f44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002710:	4b0a      	ldr	r3, [pc, #40]	@ (800273c <prvAddNewTaskToReadyList+0xb8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002718:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <prvAddNewTaskToReadyList+0xb4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002722:	429a      	cmp	r2, r3
 8002724:	d201      	bcs.n	800272a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002726:	f000 fbeb 	bl	8002f00 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	200004fc 	.word	0x200004fc
 8002738:	200003fc 	.word	0x200003fc
 800273c:	20000508 	.word	0x20000508
 8002740:	20000518 	.word	0x20000518
 8002744:	20000504 	.word	0x20000504
 8002748:	20000400 	.word	0x20000400

0800274c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d011      	beq.n	8002782 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800275e:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <vTaskDelay+0x48>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <vTaskDelay+0x20>
 8002766:	b672      	cpsid	i
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	e7fd      	b.n	8002768 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800276c:	f000 f86c 	bl	8002848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2100      	movs	r1, #0
 8002774:	0018      	movs	r0, r3
 8002776:	f000 fae3 	bl	8002d40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800277a:	f000 f871 	bl	8002860 <xTaskResumeAll>
 800277e:	0003      	movs	r3, r0
 8002780:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8002788:	f000 fbba 	bl	8002f00 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800278c:	46c0      	nop			@ (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b004      	add	sp, #16
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000524 	.word	0x20000524

08002798 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80027a6:	003a      	movs	r2, r7
 80027a8:	1d39      	adds	r1, r7, #4
 80027aa:	2308      	movs	r3, #8
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	0018      	movs	r0, r3
 80027b0:	f7fd fd36 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80027b4:	683c      	ldr	r4, [r7, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	491b      	ldr	r1, [pc, #108]	@ (8002828 <vTaskStartScheduler+0x90>)
 80027bc:	481b      	ldr	r0, [pc, #108]	@ (800282c <vTaskStartScheduler+0x94>)
 80027be:	9202      	str	r2, [sp, #8]
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	2300      	movs	r3, #0
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2300      	movs	r3, #0
 80027c8:	0022      	movs	r2, r4
 80027ca:	f7ff fe36 	bl	800243a <xTaskCreateStatic>
 80027ce:	0002      	movs	r2, r0
 80027d0:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <vTaskStartScheduler+0x98>)
 80027d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80027d4:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <vTaskStartScheduler+0x98>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80027dc:	2301      	movs	r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e001      	b.n	80027e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d113      	bne.n	8002814 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80027ec:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80027ee:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <vTaskStartScheduler+0x9c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	334c      	adds	r3, #76	@ 0x4c
 80027f4:	001a      	movs	r2, r3
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <vTaskStartScheduler+0xa0>)
 80027f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <vTaskStartScheduler+0xa4>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	4252      	negs	r2, r2
 8002800:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002802:	4b0f      	ldr	r3, [pc, #60]	@ (8002840 <vTaskStartScheduler+0xa8>)
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002808:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <vTaskStartScheduler+0xac>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800280e:	f000 fb53 	bl	8002eb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002812:	e005      	b.n	8002820 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3301      	adds	r3, #1
 8002818:	d102      	bne.n	8002820 <vTaskStartScheduler+0x88>
 800281a:	b672      	cpsid	i
 800281c:	46c0      	nop			@ (mov r8, r8)
 800281e:	e7fd      	b.n	800281c <vTaskStartScheduler+0x84>
}
 8002820:	46c0      	nop			@ (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b005      	add	sp, #20
 8002826:	bd90      	pop	{r4, r7, pc}
 8002828:	08003610 	.word	0x08003610
 800282c:	08002b99 	.word	0x08002b99
 8002830:	20000520 	.word	0x20000520
 8002834:	200003fc 	.word	0x200003fc
 8002838:	20000010 	.word	0x20000010
 800283c:	2000051c 	.word	0x2000051c
 8002840:	20000508 	.word	0x20000508
 8002844:	20000500 	.word	0x20000500

08002848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <vTaskSuspendAll+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	4b02      	ldr	r3, [pc, #8]	@ (800285c <vTaskSuspendAll+0x14>)
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000524 	.word	0x20000524

08002860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800286e:	4b3a      	ldr	r3, [pc, #232]	@ (8002958 <xTaskResumeAll+0xf8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <xTaskResumeAll+0x1c>
 8002876:	b672      	cpsid	i
 8002878:	46c0      	nop			@ (mov r8, r8)
 800287a:	e7fd      	b.n	8002878 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800287c:	f000 fb50 	bl	8002f20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002880:	4b35      	ldr	r3, [pc, #212]	@ (8002958 <xTaskResumeAll+0xf8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	4b34      	ldr	r3, [pc, #208]	@ (8002958 <xTaskResumeAll+0xf8>)
 8002888:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800288a:	4b33      	ldr	r3, [pc, #204]	@ (8002958 <xTaskResumeAll+0xf8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d15b      	bne.n	800294a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002892:	4b32      	ldr	r3, [pc, #200]	@ (800295c <xTaskResumeAll+0xfc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d057      	beq.n	800294a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800289a:	e02f      	b.n	80028fc <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800289c:	4b30      	ldr	r3, [pc, #192]	@ (8002960 <xTaskResumeAll+0x100>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3318      	adds	r3, #24
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff fd9e 	bl	80023ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3304      	adds	r3, #4
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7ff fd99 	bl	80023ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028bc:	4b29      	ldr	r3, [pc, #164]	@ (8002964 <xTaskResumeAll+0x104>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d903      	bls.n	80028cc <xTaskResumeAll+0x6c>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028c8:	4b26      	ldr	r3, [pc, #152]	@ (8002964 <xTaskResumeAll+0x104>)
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028d0:	0013      	movs	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	189b      	adds	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4a23      	ldr	r2, [pc, #140]	@ (8002968 <xTaskResumeAll+0x108>)
 80028da:	189a      	adds	r2, r3, r2
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3304      	adds	r3, #4
 80028e0:	0019      	movs	r1, r3
 80028e2:	0010      	movs	r0, r2
 80028e4:	f7ff fd29 	bl	800233a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ec:	4b1f      	ldr	r3, [pc, #124]	@ (800296c <xTaskResumeAll+0x10c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d302      	bcc.n	80028fc <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80028f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002970 <xTaskResumeAll+0x110>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028fc:	4b18      	ldr	r3, [pc, #96]	@ (8002960 <xTaskResumeAll+0x100>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1cb      	bne.n	800289c <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800290a:	f000 f9f5 	bl	8002cf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800290e:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <xTaskResumeAll+0x114>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00f      	beq.n	800293a <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800291a:	f000 f82d 	bl	8002978 <xTaskIncrementTick>
 800291e:	1e03      	subs	r3, r0, #0
 8002920:	d002      	beq.n	8002928 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8002922:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <xTaskResumeAll+0x110>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f2      	bne.n	800291a <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8002934:	4b0f      	ldr	r3, [pc, #60]	@ (8002974 <xTaskResumeAll+0x114>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800293a:	4b0d      	ldr	r3, [pc, #52]	@ (8002970 <xTaskResumeAll+0x110>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002942:	2301      	movs	r3, #1
 8002944:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002946:	f000 fadb 	bl	8002f00 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800294a:	f000 fafb 	bl	8002f44 <vPortExitCritical>

	return xAlreadyYielded;
 800294e:	68bb      	ldr	r3, [r7, #8]
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b004      	add	sp, #16
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000524 	.word	0x20000524
 800295c:	200004fc 	.word	0x200004fc
 8002960:	200004bc 	.word	0x200004bc
 8002964:	20000504 	.word	0x20000504
 8002968:	20000400 	.word	0x20000400
 800296c:	200003fc 	.word	0x200003fc
 8002970:	20000510 	.word	0x20000510
 8002974:	2000050c 	.word	0x2000050c

08002978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002982:	4b4d      	ldr	r3, [pc, #308]	@ (8002ab8 <xTaskIncrementTick+0x140>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d000      	beq.n	800298c <xTaskIncrementTick+0x14>
 800298a:	e084      	b.n	8002a96 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800298c:	4b4b      	ldr	r3, [pc, #300]	@ (8002abc <xTaskIncrementTick+0x144>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3301      	adds	r3, #1
 8002992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002994:	4b49      	ldr	r3, [pc, #292]	@ (8002abc <xTaskIncrementTick+0x144>)
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d118      	bne.n	80029d2 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80029a0:	4b47      	ldr	r3, [pc, #284]	@ (8002ac0 <xTaskIncrementTick+0x148>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <xTaskIncrementTick+0x38>
 80029aa:	b672      	cpsid	i
 80029ac:	46c0      	nop			@ (mov r8, r8)
 80029ae:	e7fd      	b.n	80029ac <xTaskIncrementTick+0x34>
 80029b0:	4b43      	ldr	r3, [pc, #268]	@ (8002ac0 <xTaskIncrementTick+0x148>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b43      	ldr	r3, [pc, #268]	@ (8002ac4 <xTaskIncrementTick+0x14c>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <xTaskIncrementTick+0x148>)
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	4b41      	ldr	r3, [pc, #260]	@ (8002ac4 <xTaskIncrementTick+0x14c>)
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	4b40      	ldr	r3, [pc, #256]	@ (8002ac8 <xTaskIncrementTick+0x150>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac8 <xTaskIncrementTick+0x150>)
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	f000 f993 	bl	8002cf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80029d2:	4b3e      	ldr	r3, [pc, #248]	@ (8002acc <xTaskIncrementTick+0x154>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d34e      	bcc.n	8002a7a <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029dc:	4b38      	ldr	r3, [pc, #224]	@ (8002ac0 <xTaskIncrementTick+0x148>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <xTaskIncrementTick+0x72>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <xTaskIncrementTick+0x74>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029f0:	4b36      	ldr	r3, [pc, #216]	@ (8002acc <xTaskIncrementTick+0x154>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	4252      	negs	r2, r2
 80029f6:	601a      	str	r2, [r3, #0]
					break;
 80029f8:	e03f      	b.n	8002a7a <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029fa:	4b31      	ldr	r3, [pc, #196]	@ (8002ac0 <xTaskIncrementTick+0x148>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d203      	bcs.n	8002a1a <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a12:	4b2e      	ldr	r3, [pc, #184]	@ (8002acc <xTaskIncrementTick+0x154>)
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	601a      	str	r2, [r3, #0]
						break;
 8002a18:	e02f      	b.n	8002a7a <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f7ff fce3 	bl	80023ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d004      	beq.n	8002a36 <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	3318      	adds	r3, #24
 8002a30:	0018      	movs	r0, r3
 8002a32:	f7ff fcda 	bl	80023ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a3a:	4b25      	ldr	r3, [pc, #148]	@ (8002ad0 <xTaskIncrementTick+0x158>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d903      	bls.n	8002a4a <xTaskIncrementTick+0xd2>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a46:	4b22      	ldr	r3, [pc, #136]	@ (8002ad0 <xTaskIncrementTick+0x158>)
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a4e:	0013      	movs	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	189b      	adds	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad4 <xTaskIncrementTick+0x15c>)
 8002a58:	189a      	adds	r2, r3, r2
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	0019      	movs	r1, r3
 8002a60:	0010      	movs	r0, r2
 8002a62:	f7ff fc6a 	bl	800233a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <xTaskIncrementTick+0x160>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d3b3      	bcc.n	80029dc <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8002a74:	2301      	movs	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a78:	e7b0      	b.n	80029dc <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <xTaskIncrementTick+0x160>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a80:	4914      	ldr	r1, [pc, #80]	@ (8002ad4 <xTaskIncrementTick+0x15c>)
 8002a82:	0013      	movs	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	189b      	adds	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	585b      	ldr	r3, [r3, r1]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d907      	bls.n	8002aa0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8002a90:	2301      	movs	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	e004      	b.n	8002aa0 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002a96:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <xTaskIncrementTick+0x164>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <xTaskIncrementTick+0x164>)
 8002a9e:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <xTaskIncrementTick+0x168>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002aac:	697b      	ldr	r3, [r7, #20]
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b006      	add	sp, #24
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	20000524 	.word	0x20000524
 8002abc:	20000500 	.word	0x20000500
 8002ac0:	200004b4 	.word	0x200004b4
 8002ac4:	200004b8 	.word	0x200004b8
 8002ac8:	20000514 	.word	0x20000514
 8002acc:	2000051c 	.word	0x2000051c
 8002ad0:	20000504 	.word	0x20000504
 8002ad4:	20000400 	.word	0x20000400
 8002ad8:	200003fc 	.word	0x200003fc
 8002adc:	2000050c 	.word	0x2000050c
 8002ae0:	20000510 	.word	0x20000510

08002ae4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002aea:	4b25      	ldr	r3, [pc, #148]	@ (8002b80 <vTaskSwitchContext+0x9c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002af2:	4b24      	ldr	r3, [pc, #144]	@ (8002b84 <vTaskSwitchContext+0xa0>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002af8:	e03e      	b.n	8002b78 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002afa:	4b22      	ldr	r3, [pc, #136]	@ (8002b84 <vTaskSwitchContext+0xa0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b00:	4b21      	ldr	r3, [pc, #132]	@ (8002b88 <vTaskSwitchContext+0xa4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	e008      	b.n	8002b1a <vTaskSwitchContext+0x36>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <vTaskSwitchContext+0x30>
 8002b0e:	b672      	cpsid	i
 8002b10:	46c0      	nop			@ (mov r8, r8)
 8002b12:	e7fd      	b.n	8002b10 <vTaskSwitchContext+0x2c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	491c      	ldr	r1, [pc, #112]	@ (8002b8c <vTaskSwitchContext+0xa8>)
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	0013      	movs	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	189b      	adds	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	585b      	ldr	r3, [r3, r1]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ed      	beq.n	8002b08 <vTaskSwitchContext+0x24>
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	0013      	movs	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	189b      	adds	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4a15      	ldr	r2, [pc, #84]	@ (8002b8c <vTaskSwitchContext+0xa8>)
 8002b38:	189b      	adds	r3, r3, r2
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	3308      	adds	r3, #8
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d104      	bne.n	8002b5c <vTaskSwitchContext+0x78>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <vTaskSwitchContext+0xac>)
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <vTaskSwitchContext+0xa4>)
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002b6c:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <vTaskSwitchContext+0xac>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	334c      	adds	r3, #76	@ 0x4c
 8002b72:	001a      	movs	r2, r3
 8002b74:	4b07      	ldr	r3, [pc, #28]	@ (8002b94 <vTaskSwitchContext+0xb0>)
 8002b76:	601a      	str	r2, [r3, #0]
}
 8002b78:	46c0      	nop			@ (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b002      	add	sp, #8
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000524 	.word	0x20000524
 8002b84:	20000510 	.word	0x20000510
 8002b88:	20000504 	.word	0x20000504
 8002b8c:	20000400 	.word	0x20000400
 8002b90:	200003fc 	.word	0x200003fc
 8002b94:	20000010 	.word	0x20000010

08002b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ba0:	f000 f84e 	bl	8002c40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ba4:	4b03      	ldr	r3, [pc, #12]	@ (8002bb4 <prvIdleTask+0x1c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d9f9      	bls.n	8002ba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002bac:	f000 f9a8 	bl	8002f00 <vPortYield>
		prvCheckTasksWaitingTermination();
 8002bb0:	e7f6      	b.n	8002ba0 <prvIdleTask+0x8>
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	20000400 	.word	0x20000400

08002bb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	e00c      	b.n	8002bde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	189b      	adds	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4a14      	ldr	r2, [pc, #80]	@ (8002c20 <prvInitialiseTaskLists+0x68>)
 8002bd0:	189b      	adds	r3, r3, r2
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f7ff fb88 	bl	80022e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	607b      	str	r3, [r7, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b06      	cmp	r3, #6
 8002be2:	d9ef      	bls.n	8002bc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002be4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <prvInitialiseTaskLists+0x6c>)
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7ff fb7e 	bl	80022e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002bec:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <prvInitialiseTaskLists+0x70>)
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f7ff fb7a 	bl	80022e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <prvInitialiseTaskLists+0x74>)
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7ff fb76 	bl	80022e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <prvInitialiseTaskLists+0x78>)
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7ff fb72 	bl	80022e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c04:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <prvInitialiseTaskLists+0x7c>)
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7ff fb6e 	bl	80022e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <prvInitialiseTaskLists+0x80>)
 8002c0e:	4a05      	ldr	r2, [pc, #20]	@ (8002c24 <prvInitialiseTaskLists+0x6c>)
 8002c10:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c12:	4b0a      	ldr	r3, [pc, #40]	@ (8002c3c <prvInitialiseTaskLists+0x84>)
 8002c14:	4a04      	ldr	r2, [pc, #16]	@ (8002c28 <prvInitialiseTaskLists+0x70>)
 8002c16:	601a      	str	r2, [r3, #0]
}
 8002c18:	46c0      	nop			@ (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000400 	.word	0x20000400
 8002c24:	2000048c 	.word	0x2000048c
 8002c28:	200004a0 	.word	0x200004a0
 8002c2c:	200004bc 	.word	0x200004bc
 8002c30:	200004d0 	.word	0x200004d0
 8002c34:	200004e8 	.word	0x200004e8
 8002c38:	200004b4 	.word	0x200004b4
 8002c3c:	200004b8 	.word	0x200004b8

08002c40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c46:	e01a      	b.n	8002c7e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8002c48:	f000 f96a 	bl	8002f20 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c4c:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <prvCheckTasksWaitingTermination+0x50>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f7ff fbc6 	bl	80023ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <prvCheckTasksWaitingTermination+0x54>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	1e5a      	subs	r2, r3, #1
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <prvCheckTasksWaitingTermination+0x54>)
 8002c66:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <prvCheckTasksWaitingTermination+0x58>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	1e5a      	subs	r2, r3, #1
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <prvCheckTasksWaitingTermination+0x58>)
 8002c70:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8002c72:	f000 f967 	bl	8002f44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 f80f 	bl	8002c9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <prvCheckTasksWaitingTermination+0x58>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e0      	bne.n	8002c48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	46c0      	nop			@ (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200004d0 	.word	0x200004d0
 8002c94:	200004fc 	.word	0x200004fc
 8002c98:	200004e4 	.word	0x200004e4

08002c9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	334c      	adds	r3, #76	@ 0x4c
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f000 fb83 	bl	80033b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	229d      	movs	r2, #157	@ 0x9d
 8002cb2:	5c9b      	ldrb	r3, [r3, r2]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 fa6f 	bl	80031a0 <vPortFree>
				vPortFree( pxTCB );
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 fa6b 	bl	80031a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002cca:	e011      	b.n	8002cf0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	229d      	movs	r2, #157	@ 0x9d
 8002cd0:	5c9b      	ldrb	r3, [r3, r2]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d104      	bne.n	8002ce0 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 fa61 	bl	80031a0 <vPortFree>
	}
 8002cde:	e007      	b.n	8002cf0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	229d      	movs	r2, #157	@ 0x9d
 8002ce4:	5c9b      	ldrb	r3, [r3, r2]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d002      	beq.n	8002cf0 <prvDeleteTCB+0x54>
 8002cea:	b672      	cpsid	i
 8002cec:	46c0      	nop			@ (mov r8, r8)
 8002cee:	e7fd      	b.n	8002cec <prvDeleteTCB+0x50>
	}
 8002cf0:	46c0      	nop			@ (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <prvResetNextTaskUnblockTime+0x40>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <prvResetNextTaskUnblockTime+0x14>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <prvResetNextTaskUnblockTime+0x16>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d12:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <prvResetNextTaskUnblockTime+0x44>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	4252      	negs	r2, r2
 8002d18:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d1a:	e008      	b.n	8002d2e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <prvResetNextTaskUnblockTime+0x40>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <prvResetNextTaskUnblockTime+0x44>)
 8002d2c:	601a      	str	r2, [r3, #0]
}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b002      	add	sp, #8
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	200004b4 	.word	0x200004b4
 8002d3c:	2000051c 	.word	0x2000051c

08002d40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d4a:	4b21      	ldr	r3, [pc, #132]	@ (8002dd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d50:	4b20      	ldr	r3, [pc, #128]	@ (8002dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3304      	adds	r3, #4
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7ff fb47 	bl	80023ea <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	d10b      	bne.n	8002d7a <prvAddCurrentTaskToDelayedList+0x3a>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d68:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	1d1a      	adds	r2, r3, #4
 8002d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8002d70:	0011      	movs	r1, r2
 8002d72:	0018      	movs	r0, r3
 8002d74:	f7ff fae1 	bl	800233a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d78:	e026      	b.n	8002dc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	18d3      	adds	r3, r2, r3
 8002d80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d82:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d209      	bcs.n	8002da6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d92:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <prvAddCurrentTaskToDelayedList+0x9c>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	0010      	movs	r0, r2
 8002da0:	f7ff faed 	bl	800237e <vListInsert>
}
 8002da4:	e010      	b.n	8002dc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002da6:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3304      	adds	r3, #4
 8002db0:	0019      	movs	r1, r3
 8002db2:	0010      	movs	r0, r2
 8002db4:	f7ff fae3 	bl	800237e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002db8:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d202      	bcs.n	8002dc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002dc2:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	601a      	str	r2, [r3, #0]
}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b004      	add	sp, #16
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000500 	.word	0x20000500
 8002dd4:	200003fc 	.word	0x200003fc
 8002dd8:	200004e8 	.word	0x200004e8
 8002ddc:	200004b8 	.word	0x200004b8
 8002de0:	200004b4 	.word	0x200004b4
 8002de4:	2000051c 	.word	0x2000051c

08002de8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3b04      	subs	r3, #4
 8002df8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2280      	movs	r2, #128	@ 0x80
 8002dfe:	0452      	lsls	r2, r2, #17
 8002e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3b04      	subs	r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3b04      	subs	r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e14:	4a08      	ldr	r2, [pc, #32]	@ (8002e38 <pxPortInitialiseStack+0x50>)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3b14      	subs	r3, #20
 8002e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3b20      	subs	r3, #32
 8002e2a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b004      	add	sp, #16
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	08002e3d 	.word	0x08002e3d

08002e3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e46:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <prvTaskExitError+0x2c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	d002      	beq.n	8002e54 <prvTaskExitError+0x18>
 8002e4e:	b672      	cpsid	i
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	e7fd      	b.n	8002e50 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8002e54:	b672      	cpsid	i
	while( ulDummy == 0 )
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0fc      	beq.n	8002e58 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b002      	add	sp, #8
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	2000000c 	.word	0x2000000c

08002e6c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8002e80:	4a0b      	ldr	r2, [pc, #44]	@ (8002eb0 <pxCurrentTCBConst2>)
 8002e82:	6813      	ldr	r3, [r2, #0]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	3020      	adds	r0, #32
 8002e88:	f380 8809 	msr	PSP, r0
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f380 8814 	msr	CONTROL, r0
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002e98:	46ae      	mov	lr, r5
 8002e9a:	bc08      	pop	{r3}
 8002e9c:	bc04      	pop	{r2}
 8002e9e:	b662      	cpsie	i
 8002ea0:	4718      	bx	r3
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	46c0      	nop			@ (mov r8, r8)
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	46c0      	nop			@ (mov r8, r8)
 8002eaa:	46c0      	nop			@ (mov r8, r8)
 8002eac:	46c0      	nop			@ (mov r8, r8)
 8002eae:	46c0      	nop			@ (mov r8, r8)

08002eb0 <pxCurrentTCBConst2>:
 8002eb0:	200003fc 	.word	0x200003fc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8002eb4:	46c0      	nop			@ (mov r8, r8)
 8002eb6:	46c0      	nop			@ (mov r8, r8)

08002eb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <xPortStartScheduler+0x40>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <xPortStartScheduler+0x40>)
 8002ec2:	21ff      	movs	r1, #255	@ 0xff
 8002ec4:	0409      	lsls	r1, r1, #16
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002eca:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <xPortStartScheduler+0x40>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <xPortStartScheduler+0x40>)
 8002ed0:	21ff      	movs	r1, #255	@ 0xff
 8002ed2:	0609      	lsls	r1, r1, #24
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8002ed8:	f000 f898 	bl	800300c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002edc:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <xPortStartScheduler+0x44>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8002ee2:	f7ff ffcd 	bl	8002e80 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002ee6:	f7ff fdfd 	bl	8002ae4 <vTaskSwitchContext>
	prvTaskExitError();
 8002eea:	f7ff ffa7 	bl	8002e3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			@ (mov r8, r8)
 8002ef8:	e000ed20 	.word	0xe000ed20
 8002efc:	2000000c 	.word	0x2000000c

08002f00 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <vPortYield+0x1c>)
 8002f06:	2280      	movs	r2, #128	@ 0x80
 8002f08:	0552      	lsls	r2, r2, #21
 8002f0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002f0c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002f10:	f3bf 8f6f 	isb	sy
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002f24:	b672      	cpsid	i
    uxCriticalNesting++;
 8002f26:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <vPortEnterCritical+0x20>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <vPortEnterCritical+0x20>)
 8002f2e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8002f30:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002f34:	f3bf 8f6f 	isb	sy
}
 8002f38:	46c0      	nop			@ (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	2000000c 	.word	0x2000000c

08002f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002f48:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <vPortExitCritical+0x2c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <vPortExitCritical+0x12>
 8002f50:	b672      	cpsid	i
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	e7fd      	b.n	8002f52 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002f56:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <vPortExitCritical+0x2c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	1e5a      	subs	r2, r3, #1
 8002f5c:	4b04      	ldr	r3, [pc, #16]	@ (8002f70 <vPortExitCritical+0x2c>)
 8002f5e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <vPortExitCritical+0x2c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d100      	bne.n	8002f6a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8002f68:	b662      	cpsie	i
    }
}
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	2000000c 	.word	0x2000000c

08002f74 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8002f74:	f3ef 8010 	mrs	r0, PRIMASK
 8002f78:	b672      	cpsid	i
 8002f7a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8002f7c:	46c0      	nop			@ (mov r8, r8)
 8002f7e:	0018      	movs	r0, r3

08002f80 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8002f80:	f380 8810 	msr	PRIMASK, r0
 8002f84:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8002f86:	46c0      	nop			@ (mov r8, r8)
	...

08002f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f90:	f3ef 8009 	mrs	r0, PSP
 8002f94:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd0 <pxCurrentTCBConst>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	3820      	subs	r0, #32
 8002f9a:	6010      	str	r0, [r2, #0]
 8002f9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002f9e:	4644      	mov	r4, r8
 8002fa0:	464d      	mov	r5, r9
 8002fa2:	4656      	mov	r6, sl
 8002fa4:	465f      	mov	r7, fp
 8002fa6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002fa8:	b508      	push	{r3, lr}
 8002faa:	b672      	cpsid	i
 8002fac:	f7ff fd9a 	bl	8002ae4 <vTaskSwitchContext>
 8002fb0:	b662      	cpsie	i
 8002fb2:	bc0c      	pop	{r2, r3}
 8002fb4:	6811      	ldr	r1, [r2, #0]
 8002fb6:	6808      	ldr	r0, [r1, #0]
 8002fb8:	3010      	adds	r0, #16
 8002fba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002fbc:	46a0      	mov	r8, r4
 8002fbe:	46a9      	mov	r9, r5
 8002fc0:	46b2      	mov	sl, r6
 8002fc2:	46bb      	mov	fp, r7
 8002fc4:	f380 8809 	msr	PSP, r0
 8002fc8:	3820      	subs	r0, #32
 8002fca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002fcc:	4718      	bx	r3
 8002fce:	46c0      	nop			@ (mov r8, r8)

08002fd0 <pxCurrentTCBConst>:
 8002fd0:	200003fc 	.word	0x200003fc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	46c0      	nop			@ (mov r8, r8)

08002fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fde:	f7ff ffc9 	bl	8002f74 <ulSetInterruptMaskFromISR>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002fe6:	f7ff fcc7 	bl	8002978 <xTaskIncrementTick>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d003      	beq.n	8002ff6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002fee:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <SysTick_Handler+0x30>)
 8002ff0:	2280      	movs	r2, #128	@ 0x80
 8002ff2:	0552      	lsls	r2, r2, #21
 8002ff4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7ff ffc1 	bl	8002f80 <vClearInterruptMaskFromISR>
}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b002      	add	sp, #8
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	e000ed04 	.word	0xe000ed04

0800300c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003010:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <prvSetupTimerInterrupt+0x34>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003016:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <prvSetupTimerInterrupt+0x38>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800301c:	4b0a      	ldr	r3, [pc, #40]	@ (8003048 <prvSetupTimerInterrupt+0x3c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	22fa      	movs	r2, #250	@ 0xfa
 8003022:	0091      	lsls	r1, r2, #2
 8003024:	0018      	movs	r0, r3
 8003026:	f7fd f86f 	bl	8000108 <__udivsi3>
 800302a:	0003      	movs	r3, r0
 800302c:	001a      	movs	r2, r3
 800302e:	4b07      	ldr	r3, [pc, #28]	@ (800304c <prvSetupTimerInterrupt+0x40>)
 8003030:	3a01      	subs	r2, #1
 8003032:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003034:	4b02      	ldr	r3, [pc, #8]	@ (8003040 <prvSetupTimerInterrupt+0x34>)
 8003036:	2207      	movs	r2, #7
 8003038:	601a      	str	r2, [r3, #0]
}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	e000e010 	.word	0xe000e010
 8003044:	e000e018 	.word	0xe000e018
 8003048:	20000000 	.word	0x20000000
 800304c:	e000e014 	.word	0xe000e014

08003050 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800305c:	f7ff fbf4 	bl	8002848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003060:	4b4a      	ldr	r3, [pc, #296]	@ (800318c <pvPortMalloc+0x13c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003068:	f000 f8e4 	bl	8003234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800306c:	4b48      	ldr	r3, [pc, #288]	@ (8003190 <pvPortMalloc+0x140>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4013      	ands	r3, r2
 8003074:	d000      	beq.n	8003078 <pvPortMalloc+0x28>
 8003076:	e07b      	b.n	8003170 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d013      	beq.n	80030a6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800307e:	2208      	movs	r2, #8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	189b      	adds	r3, r3, r2
 8003084:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2207      	movs	r2, #7
 800308a:	4013      	ands	r3, r2
 800308c:	d00b      	beq.n	80030a6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2207      	movs	r2, #7
 8003092:	4393      	bics	r3, r2
 8003094:	3308      	adds	r3, #8
 8003096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2207      	movs	r2, #7
 800309c:	4013      	ands	r3, r2
 800309e:	d002      	beq.n	80030a6 <pvPortMalloc+0x56>
 80030a0:	b672      	cpsid	i
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	e7fd      	b.n	80030a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d061      	beq.n	8003170 <pvPortMalloc+0x120>
 80030ac:	4b39      	ldr	r3, [pc, #228]	@ (8003194 <pvPortMalloc+0x144>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d85c      	bhi.n	8003170 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80030b6:	4b38      	ldr	r3, [pc, #224]	@ (8003198 <pvPortMalloc+0x148>)
 80030b8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80030ba:	4b37      	ldr	r3, [pc, #220]	@ (8003198 <pvPortMalloc+0x148>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030c0:	e004      	b.n	80030cc <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d903      	bls.n	80030de <pvPortMalloc+0x8e>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f1      	bne.n	80030c2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80030de:	4b2b      	ldr	r3, [pc, #172]	@ (800318c <pvPortMalloc+0x13c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d043      	beq.n	8003170 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2208      	movs	r2, #8
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	1ad2      	subs	r2, r2, r3
 8003102:	2308      	movs	r3, #8
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	429a      	cmp	r2, r3
 8003108:	d917      	bls.n	800313a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	18d3      	adds	r3, r2, r3
 8003110:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2207      	movs	r2, #7
 8003116:	4013      	ands	r3, r2
 8003118:	d002      	beq.n	8003120 <pvPortMalloc+0xd0>
 800311a:	b672      	cpsid	i
 800311c:	46c0      	nop			@ (mov r8, r8)
 800311e:	e7fd      	b.n	800311c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	1ad2      	subs	r2, r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	0018      	movs	r0, r3
 8003136:	f000 f8dd 	bl	80032f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800313a:	4b16      	ldr	r3, [pc, #88]	@ (8003194 <pvPortMalloc+0x144>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	1ad2      	subs	r2, r2, r3
 8003144:	4b13      	ldr	r3, [pc, #76]	@ (8003194 <pvPortMalloc+0x144>)
 8003146:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003148:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <pvPortMalloc+0x144>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b13      	ldr	r3, [pc, #76]	@ (800319c <pvPortMalloc+0x14c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d203      	bcs.n	800315c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003154:	4b0f      	ldr	r3, [pc, #60]	@ (8003194 <pvPortMalloc+0x144>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b10      	ldr	r3, [pc, #64]	@ (800319c <pvPortMalloc+0x14c>)
 800315a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <pvPortMalloc+0x140>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	431a      	orrs	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003170:	f7ff fb76 	bl	8002860 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2207      	movs	r2, #7
 8003178:	4013      	ands	r3, r2
 800317a:	d002      	beq.n	8003182 <pvPortMalloc+0x132>
 800317c:	b672      	cpsid	i
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	e7fd      	b.n	800317e <pvPortMalloc+0x12e>
	return pvReturn;
 8003182:	68fb      	ldr	r3, [r7, #12]
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b006      	add	sp, #24
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20001130 	.word	0x20001130
 8003190:	2000113c 	.word	0x2000113c
 8003194:	20001134 	.word	0x20001134
 8003198:	20001128 	.word	0x20001128
 800319c:	20001138 	.word	0x20001138

080031a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d037      	beq.n	8003222 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80031b2:	2308      	movs	r3, #8
 80031b4:	425b      	negs	r3, r3
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	18d3      	adds	r3, r2, r3
 80031ba:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <vPortFree+0x8c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4013      	ands	r3, r2
 80031ca:	d102      	bne.n	80031d2 <vPortFree+0x32>
 80031cc:	b672      	cpsid	i
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	e7fd      	b.n	80031ce <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <vPortFree+0x40>
 80031da:	b672      	cpsid	i
 80031dc:	46c0      	nop			@ (mov r8, r8)
 80031de:	e7fd      	b.n	80031dc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	4b11      	ldr	r3, [pc, #68]	@ (800322c <vPortFree+0x8c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4013      	ands	r3, r2
 80031ea:	d01a      	beq.n	8003222 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d116      	bne.n	8003222 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	4b0c      	ldr	r3, [pc, #48]	@ (800322c <vPortFree+0x8c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	401a      	ands	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003204:	f7ff fb20 	bl	8002848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4b08      	ldr	r3, [pc, #32]	@ (8003230 <vPortFree+0x90>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	18d2      	adds	r2, r2, r3
 8003212:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <vPortFree+0x90>)
 8003214:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	0018      	movs	r0, r3
 800321a:	f000 f86b 	bl	80032f4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800321e:	f7ff fb1f 	bl	8002860 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b004      	add	sp, #16
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	2000113c 	.word	0x2000113c
 8003230:	20001134 	.word	0x20001134

08003234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800323a:	23c0      	movs	r3, #192	@ 0xc0
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003240:	4b26      	ldr	r3, [pc, #152]	@ (80032dc <prvHeapInit+0xa8>)
 8003242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2207      	movs	r2, #7
 8003248:	4013      	ands	r3, r2
 800324a:	d00c      	beq.n	8003266 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3307      	adds	r3, #7
 8003250:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2207      	movs	r2, #7
 8003256:	4393      	bics	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1ad2      	subs	r2, r2, r3
 8003260:	4b1e      	ldr	r3, [pc, #120]	@ (80032dc <prvHeapInit+0xa8>)
 8003262:	18d3      	adds	r3, r2, r3
 8003264:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800326a:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <prvHeapInit+0xac>)
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003270:	4b1b      	ldr	r3, [pc, #108]	@ (80032e0 <prvHeapInit+0xac>)
 8003272:	2200      	movs	r2, #0
 8003274:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	18d3      	adds	r3, r2, r3
 800327c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800327e:	2208      	movs	r2, #8
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2207      	movs	r2, #7
 800328a:	4393      	bics	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4b14      	ldr	r3, [pc, #80]	@ (80032e4 <prvHeapInit+0xb0>)
 8003292:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003294:	4b13      	ldr	r3, [pc, #76]	@ (80032e4 <prvHeapInit+0xb0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2200      	movs	r2, #0
 800329a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800329c:	4b11      	ldr	r3, [pc, #68]	@ (80032e4 <prvHeapInit+0xb0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	1ad2      	subs	r2, r2, r3
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80032b2:	4b0c      	ldr	r3, [pc, #48]	@ (80032e4 <prvHeapInit+0xb0>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <prvHeapInit+0xb4>)
 80032c0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <prvHeapInit+0xb8>)
 80032c8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80032ca:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <prvHeapInit+0xbc>)
 80032cc:	2280      	movs	r2, #128	@ 0x80
 80032ce:	0612      	lsls	r2, r2, #24
 80032d0:	601a      	str	r2, [r3, #0]
}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b004      	add	sp, #16
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	20000528 	.word	0x20000528
 80032e0:	20001128 	.word	0x20001128
 80032e4:	20001130 	.word	0x20001130
 80032e8:	20001138 	.word	0x20001138
 80032ec:	20001134 	.word	0x20001134
 80032f0:	2000113c 	.word	0x2000113c

080032f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032fc:	4b27      	ldr	r3, [pc, #156]	@ (800339c <prvInsertBlockIntoFreeList+0xa8>)
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e002      	b.n	8003308 <prvInsertBlockIntoFreeList+0x14>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	d8f7      	bhi.n	8003302 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	18d3      	adds	r3, r2, r3
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d108      	bne.n	8003336 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	18d2      	adds	r2, r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	18d2      	adds	r2, r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d118      	bne.n	800337c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b14      	ldr	r3, [pc, #80]	@ (80033a0 <prvInsertBlockIntoFreeList+0xac>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d00d      	beq.n	8003372 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	18d2      	adds	r2, r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e008      	b.n	8003384 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003372:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <prvInsertBlockIntoFreeList+0xac>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e003      	b.n	8003384 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	429a      	cmp	r2, r3
 800338a:	d002      	beq.n	8003392 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b004      	add	sp, #16
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	20001128 	.word	0x20001128
 80033a0:	20001130 	.word	0x20001130

080033a4 <memset>:
 80033a4:	0003      	movs	r3, r0
 80033a6:	1882      	adds	r2, r0, r2
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d100      	bne.n	80033ae <memset+0xa>
 80033ac:	4770      	bx	lr
 80033ae:	7019      	strb	r1, [r3, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	e7f9      	b.n	80033a8 <memset+0x4>

080033b4 <_reclaim_reent>:
 80033b4:	4b33      	ldr	r3, [pc, #204]	@ (8003484 <_reclaim_reent+0xd0>)
 80033b6:	b570      	push	{r4, r5, r6, lr}
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	0004      	movs	r4, r0
 80033bc:	4283      	cmp	r3, r0
 80033be:	d05f      	beq.n	8003480 <_reclaim_reent+0xcc>
 80033c0:	69c3      	ldr	r3, [r0, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d027      	beq.n	8003416 <_reclaim_reent+0x62>
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <_reclaim_reent+0x34>
 80033cc:	2500      	movs	r5, #0
 80033ce:	69e3      	ldr	r3, [r4, #28]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	5959      	ldr	r1, [r3, r5]
 80033d4:	2900      	cmp	r1, #0
 80033d6:	d118      	bne.n	800340a <_reclaim_reent+0x56>
 80033d8:	3504      	adds	r5, #4
 80033da:	2d80      	cmp	r5, #128	@ 0x80
 80033dc:	d1f7      	bne.n	80033ce <_reclaim_reent+0x1a>
 80033de:	69e3      	ldr	r3, [r4, #28]
 80033e0:	0020      	movs	r0, r4
 80033e2:	68d9      	ldr	r1, [r3, #12]
 80033e4:	f000 f876 	bl	80034d4 <_free_r>
 80033e8:	69e3      	ldr	r3, [r4, #28]
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	2900      	cmp	r1, #0
 80033ee:	d002      	beq.n	80033f6 <_reclaim_reent+0x42>
 80033f0:	0020      	movs	r0, r4
 80033f2:	f000 f86f 	bl	80034d4 <_free_r>
 80033f6:	69e3      	ldr	r3, [r4, #28]
 80033f8:	689d      	ldr	r5, [r3, #8]
 80033fa:	2d00      	cmp	r5, #0
 80033fc:	d00b      	beq.n	8003416 <_reclaim_reent+0x62>
 80033fe:	0029      	movs	r1, r5
 8003400:	0020      	movs	r0, r4
 8003402:	682d      	ldr	r5, [r5, #0]
 8003404:	f000 f866 	bl	80034d4 <_free_r>
 8003408:	e7f7      	b.n	80033fa <_reclaim_reent+0x46>
 800340a:	680e      	ldr	r6, [r1, #0]
 800340c:	0020      	movs	r0, r4
 800340e:	f000 f861 	bl	80034d4 <_free_r>
 8003412:	0031      	movs	r1, r6
 8003414:	e7de      	b.n	80033d4 <_reclaim_reent+0x20>
 8003416:	6961      	ldr	r1, [r4, #20]
 8003418:	2900      	cmp	r1, #0
 800341a:	d002      	beq.n	8003422 <_reclaim_reent+0x6e>
 800341c:	0020      	movs	r0, r4
 800341e:	f000 f859 	bl	80034d4 <_free_r>
 8003422:	69e1      	ldr	r1, [r4, #28]
 8003424:	2900      	cmp	r1, #0
 8003426:	d002      	beq.n	800342e <_reclaim_reent+0x7a>
 8003428:	0020      	movs	r0, r4
 800342a:	f000 f853 	bl	80034d4 <_free_r>
 800342e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003430:	2900      	cmp	r1, #0
 8003432:	d002      	beq.n	800343a <_reclaim_reent+0x86>
 8003434:	0020      	movs	r0, r4
 8003436:	f000 f84d 	bl	80034d4 <_free_r>
 800343a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800343c:	2900      	cmp	r1, #0
 800343e:	d002      	beq.n	8003446 <_reclaim_reent+0x92>
 8003440:	0020      	movs	r0, r4
 8003442:	f000 f847 	bl	80034d4 <_free_r>
 8003446:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003448:	2900      	cmp	r1, #0
 800344a:	d002      	beq.n	8003452 <_reclaim_reent+0x9e>
 800344c:	0020      	movs	r0, r4
 800344e:	f000 f841 	bl	80034d4 <_free_r>
 8003452:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003454:	2900      	cmp	r1, #0
 8003456:	d002      	beq.n	800345e <_reclaim_reent+0xaa>
 8003458:	0020      	movs	r0, r4
 800345a:	f000 f83b 	bl	80034d4 <_free_r>
 800345e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003460:	2900      	cmp	r1, #0
 8003462:	d002      	beq.n	800346a <_reclaim_reent+0xb6>
 8003464:	0020      	movs	r0, r4
 8003466:	f000 f835 	bl	80034d4 <_free_r>
 800346a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800346c:	2900      	cmp	r1, #0
 800346e:	d002      	beq.n	8003476 <_reclaim_reent+0xc2>
 8003470:	0020      	movs	r0, r4
 8003472:	f000 f82f 	bl	80034d4 <_free_r>
 8003476:	6a23      	ldr	r3, [r4, #32]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <_reclaim_reent+0xcc>
 800347c:	0020      	movs	r0, r4
 800347e:	4798      	blx	r3
 8003480:	bd70      	pop	{r4, r5, r6, pc}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	20000010 	.word	0x20000010

08003488 <__libc_init_array>:
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	2600      	movs	r6, #0
 800348c:	4c0c      	ldr	r4, [pc, #48]	@ (80034c0 <__libc_init_array+0x38>)
 800348e:	4d0d      	ldr	r5, [pc, #52]	@ (80034c4 <__libc_init_array+0x3c>)
 8003490:	1b64      	subs	r4, r4, r5
 8003492:	10a4      	asrs	r4, r4, #2
 8003494:	42a6      	cmp	r6, r4
 8003496:	d109      	bne.n	80034ac <__libc_init_array+0x24>
 8003498:	2600      	movs	r6, #0
 800349a:	f000 f875 	bl	8003588 <_init>
 800349e:	4c0a      	ldr	r4, [pc, #40]	@ (80034c8 <__libc_init_array+0x40>)
 80034a0:	4d0a      	ldr	r5, [pc, #40]	@ (80034cc <__libc_init_array+0x44>)
 80034a2:	1b64      	subs	r4, r4, r5
 80034a4:	10a4      	asrs	r4, r4, #2
 80034a6:	42a6      	cmp	r6, r4
 80034a8:	d105      	bne.n	80034b6 <__libc_init_array+0x2e>
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	00b3      	lsls	r3, r6, #2
 80034ae:	58eb      	ldr	r3, [r5, r3]
 80034b0:	4798      	blx	r3
 80034b2:	3601      	adds	r6, #1
 80034b4:	e7ee      	b.n	8003494 <__libc_init_array+0xc>
 80034b6:	00b3      	lsls	r3, r6, #2
 80034b8:	58eb      	ldr	r3, [r5, r3]
 80034ba:	4798      	blx	r3
 80034bc:	3601      	adds	r6, #1
 80034be:	e7f2      	b.n	80034a6 <__libc_init_array+0x1e>
 80034c0:	08003650 	.word	0x08003650
 80034c4:	08003650 	.word	0x08003650
 80034c8:	08003654 	.word	0x08003654
 80034cc:	08003650 	.word	0x08003650

080034d0 <__retarget_lock_acquire_recursive>:
 80034d0:	4770      	bx	lr

080034d2 <__retarget_lock_release_recursive>:
 80034d2:	4770      	bx	lr

080034d4 <_free_r>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	0005      	movs	r5, r0
 80034d8:	1e0c      	subs	r4, r1, #0
 80034da:	d010      	beq.n	80034fe <_free_r+0x2a>
 80034dc:	3c04      	subs	r4, #4
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	da00      	bge.n	80034e6 <_free_r+0x12>
 80034e4:	18e4      	adds	r4, r4, r3
 80034e6:	0028      	movs	r0, r5
 80034e8:	f000 f83e 	bl	8003568 <__malloc_lock>
 80034ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <_free_r+0x90>)
 80034ee:	6813      	ldr	r3, [r2, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <_free_r+0x2c>
 80034f4:	6063      	str	r3, [r4, #4]
 80034f6:	6014      	str	r4, [r2, #0]
 80034f8:	0028      	movs	r0, r5
 80034fa:	f000 f83d 	bl	8003578 <__malloc_unlock>
 80034fe:	bd70      	pop	{r4, r5, r6, pc}
 8003500:	42a3      	cmp	r3, r4
 8003502:	d908      	bls.n	8003516 <_free_r+0x42>
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	1821      	adds	r1, r4, r0
 8003508:	428b      	cmp	r3, r1
 800350a:	d1f3      	bne.n	80034f4 <_free_r+0x20>
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	1809      	adds	r1, r1, r0
 8003512:	6021      	str	r1, [r4, #0]
 8003514:	e7ee      	b.n	80034f4 <_free_r+0x20>
 8003516:	001a      	movs	r2, r3
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <_free_r+0x4e>
 800351e:	42a3      	cmp	r3, r4
 8003520:	d9f9      	bls.n	8003516 <_free_r+0x42>
 8003522:	6811      	ldr	r1, [r2, #0]
 8003524:	1850      	adds	r0, r2, r1
 8003526:	42a0      	cmp	r0, r4
 8003528:	d10b      	bne.n	8003542 <_free_r+0x6e>
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	1809      	adds	r1, r1, r0
 800352e:	1850      	adds	r0, r2, r1
 8003530:	6011      	str	r1, [r2, #0]
 8003532:	4283      	cmp	r3, r0
 8003534:	d1e0      	bne.n	80034f8 <_free_r+0x24>
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	1841      	adds	r1, r0, r1
 800353c:	6011      	str	r1, [r2, #0]
 800353e:	6053      	str	r3, [r2, #4]
 8003540:	e7da      	b.n	80034f8 <_free_r+0x24>
 8003542:	42a0      	cmp	r0, r4
 8003544:	d902      	bls.n	800354c <_free_r+0x78>
 8003546:	230c      	movs	r3, #12
 8003548:	602b      	str	r3, [r5, #0]
 800354a:	e7d5      	b.n	80034f8 <_free_r+0x24>
 800354c:	6820      	ldr	r0, [r4, #0]
 800354e:	1821      	adds	r1, r4, r0
 8003550:	428b      	cmp	r3, r1
 8003552:	d103      	bne.n	800355c <_free_r+0x88>
 8003554:	6819      	ldr	r1, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	1809      	adds	r1, r1, r0
 800355a:	6021      	str	r1, [r4, #0]
 800355c:	6063      	str	r3, [r4, #4]
 800355e:	6054      	str	r4, [r2, #4]
 8003560:	e7ca      	b.n	80034f8 <_free_r+0x24>
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	2000127c 	.word	0x2000127c

08003568 <__malloc_lock>:
 8003568:	b510      	push	{r4, lr}
 800356a:	4802      	ldr	r0, [pc, #8]	@ (8003574 <__malloc_lock+0xc>)
 800356c:	f7ff ffb0 	bl	80034d0 <__retarget_lock_acquire_recursive>
 8003570:	bd10      	pop	{r4, pc}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	20001278 	.word	0x20001278

08003578 <__malloc_unlock>:
 8003578:	b510      	push	{r4, lr}
 800357a:	4802      	ldr	r0, [pc, #8]	@ (8003584 <__malloc_unlock+0xc>)
 800357c:	f7ff ffa9 	bl	80034d2 <__retarget_lock_release_recursive>
 8003580:	bd10      	pop	{r4, pc}
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	20001278 	.word	0x20001278

08003588 <_init>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358e:	bc08      	pop	{r3}
 8003590:	469e      	mov	lr, r3
 8003592:	4770      	bx	lr

08003594 <_fini>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359a:	bc08      	pop	{r3}
 800359c:	469e      	mov	lr, r3
 800359e:	4770      	bx	lr
